"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const ami_1 = require("./ami");
const availability_zones_1 = require("./availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const missingContext of missingValues) {
        const key = missingContext.key;
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        let value;
        try {
            value = await provider.getValue(missingContext.props);
        }
        catch (e) {
            // Set a specially formatted provider value which will be interpreted
            // as a lookup failure in the toolkit.
            value = { [cxapi.PROVIDER_ERROR_KEY]: e.message, [settings_1.TRANSIENT_CONTEXT_KEY]: true };
        }
        context.set(key, value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
/**
 * Register a context provider
 *
 * (Only available for testing right now).
 */
function registerContextProvider(name, provider) {
    availableContextProviders[name] = provider;
}
exports.registerContextProvider = registerContextProvider;
const availableContextProviders = {
    [cxapi.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxapi.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxapi.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxapi.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
    [cxapi.AMI_PROVIDER]: ami_1.AmiContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF5QztBQUV6Qyx3Q0FBbUM7QUFDbkMsMENBQTZEO0FBQzdELCtCQUFpRDtBQUNqRCw2REFBK0Q7QUFDL0QsaURBQWlFO0FBRWpFLHFEQUE0RDtBQUM1RCxpQ0FBeUQ7QUFLekQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLGFBQXFDLEVBQ3JDLE9BQWdCLEVBQ2hCLEdBQWdCO0lBRWhCLEtBQUssTUFBTSxjQUFjLElBQUksYUFBYSxFQUFFO1FBQzFDLE1BQU0sR0FBRyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7UUFDL0IsTUFBTSxXQUFXLEdBQUcseUJBQXlCLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsMkNBQTJDO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLGNBQWMsQ0FBQyxRQUFRLHVGQUF1RixDQUFDLENBQUM7U0FDeEs7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0QyxJQUFJLEtBQUssQ0FBQztRQUNWLElBQUk7WUFDRixLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2RDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YscUVBQXFFO1lBQ3JFLHNDQUFzQztZQUN0QyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxnQ0FBcUIsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2xGO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsZUFBSyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDL0Q7QUFDSCxDQUFDO0FBMUJELG9EQTBCQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQix1QkFBdUIsQ0FBQyxJQUFZLEVBQUUsUUFBNkI7SUFDakYseUJBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQzdDLENBQUM7QUFGRCwwREFFQztBQUVELE1BQU0seUJBQXlCLEdBQWdCO0lBQzdDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsNENBQXVCO0lBQzNELENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQUUseUNBQXdCO0lBQ3hELENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsOENBQStCO0lBQzdELENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLHNDQUErQjtJQUNyRCxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSw4QkFBd0I7Q0FDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgeyBTZGtQcm92aWRlciB9IGZyb20gJy4uL2FwaSc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgQ29udGV4dCwgVFJBTlNJRU5UX0NPTlRFWFRfS0VZIH0gZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgQW1pQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9hbWknO1xuaW1wb3J0IHsgQVpDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL2F2YWlsYWJpbGl0eS16b25lcyc7XG5pbXBvcnQgeyBIb3N0ZWRab25lQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9ob3N0ZWQtem9uZXMnO1xuaW1wb3J0IHsgQ29udGV4dFByb3ZpZGVyUGx1Z2luIH0gZnJvbSAnLi9wcm92aWRlcic7XG5pbXBvcnQgeyBTU01Db250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3NzbS1wYXJhbWV0ZXJzJztcbmltcG9ydCB7IFZwY05ldHdvcmtDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3ZwY3MnO1xuXG50eXBlIFByb3ZpZGVyQ29uc3RydWN0b3IgPSAgKG5ldyAoc2RrOiBTZGtQcm92aWRlcikgPT4gQ29udGV4dFByb3ZpZGVyUGx1Z2luKTtcbmV4cG9ydCB0eXBlIFByb3ZpZGVyTWFwID0ge1tuYW1lOiBzdHJpbmddOiBQcm92aWRlckNvbnN0cnVjdG9yfTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgdGhlIGxpc3Qgb2YgbWlzc2luZyBjb250ZXh0IHZhbHVlcyBhbmQgaW52b2tlIHRoZSBhcHByb3ByaWF0ZSBwcm92aWRlcnMgZnJvbSB0aGUgbWFwIHRvIHJldHJpZXZlIHRoZW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3ZpZGVDb250ZXh0VmFsdWVzKFxuICBtaXNzaW5nVmFsdWVzOiBjeGFwaS5NaXNzaW5nQ29udGV4dFtdLFxuICBjb250ZXh0OiBDb250ZXh0LFxuICBzZGs6IFNka1Byb3ZpZGVyKSB7XG5cbiAgZm9yIChjb25zdCBtaXNzaW5nQ29udGV4dCBvZiBtaXNzaW5nVmFsdWVzKSB7XG4gICAgY29uc3Qga2V5ID0gbWlzc2luZ0NvbnRleHQua2V5O1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gYXZhaWxhYmxlQ29udGV4dFByb3ZpZGVyc1ttaXNzaW5nQ29udGV4dC5wcm92aWRlcl07XG4gICAgaWYgKCFjb25zdHJ1Y3Rvcikge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgY29udGV4dCBwcm92aWRlciBuYW1lOiAke21pc3NpbmdDb250ZXh0LnByb3ZpZGVyfS4gWW91IG1pZ2h0IG5lZWQgdG8gdXBkYXRlIHRoZSB0b29sa2l0IHRvIG1hdGNoIHRoZSB2ZXJzaW9uIG9mIHRoZSBjb25zdHJ1Y3QgbGlicmFyeS5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm92aWRlciA9IG5ldyBjb25zdHJ1Y3RvcihzZGspO1xuXG4gICAgbGV0IHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IGF3YWl0IHByb3ZpZGVyLmdldFZhbHVlKG1pc3NpbmdDb250ZXh0LnByb3BzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBTZXQgYSBzcGVjaWFsbHkgZm9ybWF0dGVkIHByb3ZpZGVyIHZhbHVlIHdoaWNoIHdpbGwgYmUgaW50ZXJwcmV0ZWRcbiAgICAgIC8vIGFzIGEgbG9va3VwIGZhaWx1cmUgaW4gdGhlIHRvb2xraXQuXG4gICAgICB2YWx1ZSA9IHsgW2N4YXBpLlBST1ZJREVSX0VSUk9SX0tFWV06IGUubWVzc2FnZSwgW1RSQU5TSUVOVF9DT05URVhUX0tFWV06IHRydWUgfTtcbiAgICB9XG4gICAgY29udGV4dC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZGVidWcoYFNldHRpbmcgXCIke2tleX1cIiBjb250ZXh0IHRvICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBjb250ZXh0IHByb3ZpZGVyXG4gKlxuICogKE9ubHkgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIHJpZ2h0IG5vdykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvbnRleHRQcm92aWRlcihuYW1lOiBzdHJpbmcsIHByb3ZpZGVyOiBQcm92aWRlckNvbnN0cnVjdG9yKSB7XG4gIGF2YWlsYWJsZUNvbnRleHRQcm92aWRlcnNbbmFtZV0gPSBwcm92aWRlcjtcbn1cblxuY29uc3QgYXZhaWxhYmxlQ29udGV4dFByb3ZpZGVyczogUHJvdmlkZXJNYXAgPSB7XG4gIFtjeGFwaS5BVkFJTEFCSUxJVFlfWk9ORV9QUk9WSURFUl06IEFaQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuU1NNX1BBUkFNRVRFUl9QUk9WSURFUl06IFNTTUNvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLkhPU1RFRF9aT05FX1BST1ZJREVSXTogSG9zdGVkWm9uZUNvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLlZQQ19QUk9WSURFUl06IFZwY05ldHdvcmtDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG4gIFtjeGFwaS5BTUlfUFJPVklERVJdOiBBbWlDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG59O1xuIl19