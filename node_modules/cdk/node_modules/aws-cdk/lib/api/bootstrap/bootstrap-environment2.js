"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const __1 = require("..");
const serialize_1 = require("../../serialize");
const aws_auth_1 = require("../aws-auth");
async function bootstrapEnvironment2(environment, sdkProvider, toolkitStackName, roleArn, props = {}) {
    var _a, _b, _c, _d;
    if (((_a = props.trustedAccounts) === null || _a === void 0 ? void 0 : _a.length) && !((_b = props.cloudFormationExecutionPolicies) === null || _b === void 0 ? void 0 : _b.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap-new'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    // convert from YAML to JSON (which the Cloud Assembly uses)
    const templateFile = `${toolkitStackName}.template.json`;
    const bootstrapTemplatePath = path.join(__dirname, 'bootstrap-template.yaml');
    const bootstrapTemplateObject = await serialize_1.loadStructuredFile(bootstrapTemplatePath);
    await fs.writeJson(path.join(builder.outdir, templateFile), bootstrapTemplateObject);
    builder.addArtifact(toolkitStackName, {
        type: cxapi.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile,
        },
    });
    const resolvedEnvironment = await sdkProvider.resolveEnvironment(environment.account, environment.region);
    const assembly = builder.buildAssembly();
    return await __1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        resolvedEnvironment,
        sdk: await sdkProvider.forEnvironment(environment.account, environment.region, aws_auth_1.Mode.ForWriting),
        sdkProvider,
        roleArn,
        tags: props.tags,
        execute: props.execute,
        parameters: {
            FileAssetsBucketName: props.bucketName,
            FileAssetsBucketKmsKeyId: props.kmsKeyId,
            TrustedAccounts: (_c = props.trustedAccounts) === null || _c === void 0 ? void 0 : _c.join(','),
            CloudFormationExecutionPolicies: (_d = props.cloudFormationExecutionPolicies) === null || _d === void 0 ? void 0 : _d.join(','),
        },
    });
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50Mi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb3RzdHJhcC1lbnZpcm9ubWVudDIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsMEJBQStFO0FBQy9FLCtDQUFxRDtBQUNyRCwwQ0FBZ0Q7QUFFekMsS0FBSyxVQUFVLHFCQUFxQixDQUN6QyxXQUE4QixFQUFFLFdBQXdCLEVBQ3hELGdCQUF3QixFQUFFLE9BQTJCLEVBQ3JELFFBQW1DLEVBQUU7O0lBQ3JDLElBQUksT0FBQSxLQUFLLENBQUMsZUFBZSwwQ0FBRSxNQUFNLEtBQUksUUFBQyxLQUFLLENBQUMsK0JBQStCLDBDQUFFLE1BQU0sQ0FBQSxFQUFFO1FBQ25GLE1BQU0sSUFBSSxLQUFLLENBQUMsOEVBQThFLENBQUMsQ0FBQztLQUNqRztJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDN0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFdkQsNERBQTREO0lBQzVELE1BQU0sWUFBWSxHQUFHLEdBQUcsZ0JBQWdCLGdCQUFnQixDQUFDO0lBQ3pELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUM5RSxNQUFNLHVCQUF1QixHQUFHLE1BQU0sOEJBQWtCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNoRixNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsRUFDdkMsdUJBQXVCLENBQUMsQ0FBQztJQUUzQixPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFO1FBQ3BDLElBQUksRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUNqRCxXQUFXLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbkYsVUFBVSxFQUFFO1lBQ1YsWUFBWTtTQUNiO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxRyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekMsT0FBTyxNQUFNLGVBQVcsQ0FBQztRQUN2QixLQUFLLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRCxtQkFBbUI7UUFDbkIsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsZUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMvRixXQUFXO1FBQ1gsT0FBTztRQUNQLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsVUFBVSxFQUFFO1lBQ1Ysb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDdEMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEMsZUFBZSxRQUFFLEtBQUssQ0FBQyxlQUFlLDBDQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDakQsK0JBQStCLFFBQUUsS0FBSyxDQUFDLCtCQUErQiwwQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2xGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTdDRCxzREE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEJvb3RzdHJhcEVudmlyb25tZW50UHJvcHMsIGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4uJztcbmltcG9ydCB7IGxvYWRTdHJ1Y3R1cmVkRmlsZSB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBNb2RlLCBTZGtQcm92aWRlciB9IGZyb20gJy4uL2F3cy1hdXRoJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcEVudmlyb25tZW50MihcbiAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50LCBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXIsXG4gIHRvb2xraXRTdGFja05hbWU6IHN0cmluZywgcm9sZUFybjogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBwcm9wczogQm9vdHN0cmFwRW52aXJvbm1lbnRQcm9wcyA9IHt9KTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICBpZiAocHJvcHMudHJ1c3RlZEFjY291bnRzPy5sZW5ndGggJiYgIXByb3BzLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgYXJlIHJlcXVpcmVkIGlmIC0tdHJ1c3QgaGFzIGJlZW4gcGFzc2VkIScpO1xuICB9XG5cbiAgY29uc3Qgb3V0ZGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICdjZGstYm9vdHN0cmFwLW5ldycpKTtcbiAgY29uc3QgYnVpbGRlciA9IG5ldyBjeGFwaS5DbG91ZEFzc2VtYmx5QnVpbGRlcihvdXRkaXIpO1xuXG4gIC8vIGNvbnZlcnQgZnJvbSBZQU1MIHRvIEpTT04gKHdoaWNoIHRoZSBDbG91ZCBBc3NlbWJseSB1c2VzKVxuICBjb25zdCB0ZW1wbGF0ZUZpbGUgPSBgJHt0b29sa2l0U3RhY2tOYW1lfS50ZW1wbGF0ZS5qc29uYDtcbiAgY29uc3QgYm9vdHN0cmFwVGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2Jvb3RzdHJhcC10ZW1wbGF0ZS55YW1sJyk7XG4gIGNvbnN0IGJvb3RzdHJhcFRlbXBsYXRlT2JqZWN0ID0gYXdhaXQgbG9hZFN0cnVjdHVyZWRGaWxlKGJvb3RzdHJhcFRlbXBsYXRlUGF0aCk7XG4gIGF3YWl0IGZzLndyaXRlSnNvbihcbiAgICBwYXRoLmpvaW4oYnVpbGRlci5vdXRkaXIsIHRlbXBsYXRlRmlsZSksXG4gICAgYm9vdHN0cmFwVGVtcGxhdGVPYmplY3QpO1xuXG4gIGJ1aWxkZXIuYWRkQXJ0aWZhY3QodG9vbGtpdFN0YWNrTmFtZSwge1xuICAgIHR5cGU6IGN4YXBpLkFydGlmYWN0VHlwZS5BV1NfQ0xPVURGT1JNQVRJT05fU1RBQ0ssXG4gICAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50VXRpbHMuZm9ybWF0KGVudmlyb25tZW50LmFjY291bnQsIGVudmlyb25tZW50LnJlZ2lvbiksXG4gICAgcHJvcGVydGllczoge1xuICAgICAgdGVtcGxhdGVGaWxlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHJlc29sdmVkRW52aXJvbm1lbnQgPSBhd2FpdCBzZGtQcm92aWRlci5yZXNvbHZlRW52aXJvbm1lbnQoZW52aXJvbm1lbnQuYWNjb3VudCwgZW52aXJvbm1lbnQucmVnaW9uKTtcblxuICBjb25zdCBhc3NlbWJseSA9IGJ1aWxkZXIuYnVpbGRBc3NlbWJseSgpO1xuICByZXR1cm4gYXdhaXQgZGVwbG95U3RhY2soe1xuICAgIHN0YWNrOiBhc3NlbWJseS5nZXRTdGFja0J5TmFtZSh0b29sa2l0U3RhY2tOYW1lKSxcbiAgICByZXNvbHZlZEVudmlyb25tZW50LFxuICAgIHNkazogYXdhaXQgc2RrUHJvdmlkZXIuZm9yRW52aXJvbm1lbnQoZW52aXJvbm1lbnQuYWNjb3VudCwgZW52aXJvbm1lbnQucmVnaW9uLCBNb2RlLkZvcldyaXRpbmcpLFxuICAgIHNka1Byb3ZpZGVyLFxuICAgIHJvbGVBcm4sXG4gICAgdGFnczogcHJvcHMudGFncyxcbiAgICBleGVjdXRlOiBwcm9wcy5leGVjdXRlLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIEZpbGVBc3NldHNCdWNrZXROYW1lOiBwcm9wcy5idWNrZXROYW1lLFxuICAgICAgRmlsZUFzc2V0c0J1Y2tldEttc0tleUlkOiBwcm9wcy5rbXNLZXlJZCxcbiAgICAgIFRydXN0ZWRBY2NvdW50czogcHJvcHMudHJ1c3RlZEFjY291bnRzPy5qb2luKCcsJyksXG4gICAgICBDbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzOiBwcm9wcy5jbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzPy5qb2luKCcsJyksXG4gICAgfSxcbiAgfSk7XG59XG4iXX0=