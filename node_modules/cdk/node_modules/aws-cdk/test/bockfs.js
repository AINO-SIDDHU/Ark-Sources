"use strict";
// A not-so-fake filesystem mock similar to mock-fs
//
// mock-fs is super convenient but we can't always use it:
// - When you use console.log() jest wants to load things from the filesystem (which fails).
// - When you make AWS calls the SDK wants to load things from the filesystem (which fails).
//
// Therefore, something similar which uses tempdirs on your actual disk.
//
// The big downside compared to mockfs is that you need to use bockfs.path() to translate
// fake paths to real paths.
const fs = require("fs-extra");
const os = require("os");
const path_ = require("path");
const bockFsRoot = path_.join(os.tmpdir(), 'bockfs');
function bockfs(files) {
    for (const [fileName, contents] of Object.entries(files)) {
        bockfs.write(fileName, contents);
    }
}
(function (bockfs) {
    function write(fileName, contents) {
        const fullPath = path(fileName);
        fs.mkdirSync(path_.dirname(fullPath), { recursive: true });
        fs.writeFileSync(fullPath, contents, { encoding: 'utf-8' });
    }
    bockfs.write = write;
    function path(x) {
        if (x.startsWith('/')) {
            x = x.substr(1);
        } // Force path to be non-absolute
        return path_.join(bockFsRoot, x);
    }
    bockfs.path = path;
    function restore() {
        fs.removeSync(bockFsRoot);
    }
    bockfs.restore = restore;
})(bockfs || (bockfs = {}));
module.exports = bockfs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9ja2ZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9ja2ZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtREFBbUQ7QUFDbkQsRUFBRTtBQUNGLDBEQUEwRDtBQUMxRCw0RkFBNEY7QUFDNUYsNEZBQTRGO0FBQzVGLEVBQUU7QUFDRix3RUFBd0U7QUFDeEUsRUFBRTtBQUNGLHlGQUF5RjtBQUN6Riw0QkFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFFOUIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFckQsU0FBUyxNQUFNLENBQUMsS0FBNkI7SUFDM0MsS0FBSyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDbEM7QUFDSCxDQUFDO0FBRUQsV0FBVSxNQUFNO0lBQ2QsU0FBZ0IsS0FBSyxDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7UUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNELEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFKZSxZQUFLLFFBSXBCLENBQUE7SUFFRCxTQUFnQixJQUFJLENBQUMsQ0FBUztRQUM1QixJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUFFLENBQUMsZ0NBQWdDO1FBQzVFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUhlLFdBQUksT0FHbkIsQ0FBQTtJQUVELFNBQWdCLE9BQU87UUFDckIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRmUsY0FBTyxVQUV0QixDQUFBO0FBQ0gsQ0FBQyxFQWZTLE1BQU0sS0FBTixNQUFNLFFBZWY7QUFFRCxpQkFBUyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIG5vdC1zby1mYWtlIGZpbGVzeXN0ZW0gbW9jayBzaW1pbGFyIHRvIG1vY2stZnNcbi8vXG4vLyBtb2NrLWZzIGlzIHN1cGVyIGNvbnZlbmllbnQgYnV0IHdlIGNhbid0IGFsd2F5cyB1c2UgaXQ6XG4vLyAtIFdoZW4geW91IHVzZSBjb25zb2xlLmxvZygpIGplc3Qgd2FudHMgdG8gbG9hZCB0aGluZ3MgZnJvbSB0aGUgZmlsZXN5c3RlbSAod2hpY2ggZmFpbHMpLlxuLy8gLSBXaGVuIHlvdSBtYWtlIEFXUyBjYWxscyB0aGUgU0RLIHdhbnRzIHRvIGxvYWQgdGhpbmdzIGZyb20gdGhlIGZpbGVzeXN0ZW0gKHdoaWNoIGZhaWxzKS5cbi8vXG4vLyBUaGVyZWZvcmUsIHNvbWV0aGluZyBzaW1pbGFyIHdoaWNoIHVzZXMgdGVtcGRpcnMgb24geW91ciBhY3R1YWwgZGlzay5cbi8vXG4vLyBUaGUgYmlnIGRvd25zaWRlIGNvbXBhcmVkIHRvIG1vY2tmcyBpcyB0aGF0IHlvdSBuZWVkIHRvIHVzZSBib2NrZnMucGF0aCgpIHRvIHRyYW5zbGF0ZVxuLy8gZmFrZSBwYXRocyB0byByZWFsIHBhdGhzLlxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aF8gZnJvbSAncGF0aCc7XG5cbmNvbnN0IGJvY2tGc1Jvb3QgPSBwYXRoXy5qb2luKG9zLnRtcGRpcigpLCAnYm9ja2ZzJyk7XG5cbmZ1bmN0aW9uIGJvY2tmcyhmaWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPikge1xuICBmb3IgKGNvbnN0IFtmaWxlTmFtZSwgY29udGVudHNdIG9mIE9iamVjdC5lbnRyaWVzKGZpbGVzKSkge1xuICAgIGJvY2tmcy53cml0ZShmaWxlTmFtZSwgY29udGVudHMpO1xuICB9XG59XG5cbm5hbWVzcGFjZSBib2NrZnMge1xuICBleHBvcnQgZnVuY3Rpb24gd3JpdGUoZmlsZU5hbWU6IHN0cmluZywgY29udGVudHM6IHN0cmluZykge1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aChmaWxlTmFtZSk7XG4gICAgZnMubWtkaXJTeW5jKHBhdGhfLmRpcm5hbWUoZnVsbFBhdGgpLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZ1bGxQYXRoLCBjb250ZW50cywgeyBlbmNvZGluZzogJ3V0Zi04JyB9KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBwYXRoKHg6IHN0cmluZykge1xuICAgIGlmICh4LnN0YXJ0c1dpdGgoJy8nKSkgeyB4ID0geC5zdWJzdHIoMSk7IH0gLy8gRm9yY2UgcGF0aCB0byBiZSBub24tYWJzb2x1dGVcbiAgICByZXR1cm4gcGF0aF8uam9pbihib2NrRnNSb290LCB4KTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgIGZzLnJlbW92ZVN5bmMoYm9ja0ZzUm9vdCk7XG4gIH1cbn1cblxuZXhwb3J0ID0gYm9ja2ZzOyJdfQ==