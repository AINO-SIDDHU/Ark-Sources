/**
 * @fileoverview added by tsickle
 * Generated from: config/MetaConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs/internal/BehaviorSubject";
import * as i0 from "@angular/core";
var MetaConfig = /** @class */ (function () {
    function MetaConfig() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.metaConfigHeaderSource = new BehaviorSubject(this.metaConfigHeader);
        this.currentMetaConfigHeader = this.metaConfigHeaderSource.asObservable();
    }
    Object.defineProperty(MetaConfig.prototype, "getMetaConfigHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this.metaConfigHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaConfig.prototype, "setMetaConfigHeader", {
        set: /**
         * @param {?} metaConfigHeader
         * @return {?}
         */
        function (metaConfigHeader) {
            this.metaConfigHeader = metaConfigHeader;
            this.metaConfigHeaderSource.next(this.metaConfigHeader);
        },
        enumerable: true,
        configurable: true
    });
    MetaConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ MetaConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MetaConfig_Factory() { return new MetaConfig(); }, token: MetaConfig, providedIn: "root" });
    return MetaConfig;
}());
export { MetaConfig };
if (false) {
    /** @type {?} */
    MetaConfig.prototype.metaConfigHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    MetaConfig.prototype.metaConfigHeaderSource;
    /** @type {?} */
    MetaConfig.prototype.currentMetaConfigHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YUNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VudGVycHJpc2UtbWV0YS1jb25maWcvIiwic291cmNlcyI6WyJjb25maWcvTWV0YUNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUVoRTtJQUFBOzs7OztRQVVXLDJCQUFzQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25GLDRCQUF1QixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQVd4RTtJQVRHLHNCQUFJLDJDQUFtQjs7OztRQUF2QjtZQUNJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMkNBQW1COzs7OztRQUF2QixVQUF3QixnQkFBd0I7WUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1lBQ3pDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsQ0FBQzs7O09BQUE7O2dCQXBCSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7cUJBTEQ7Q0F5QkMsQUF0QkQsSUFzQkM7U0FuQlksVUFBVTs7O0lBRW5CLHNDQUF5Qjs7Ozs7O0lBS3pCLDRDQUFtRjs7SUFDbkYsNkNBQXFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqcy9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3RcIjtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNZXRhQ29uZmlnIHtcblxuICAgIG1ldGFDb25maWdIZWFkZXI6IHN0cmluZztcblxuICAgIC8qKiBtYWtlcyB0aGUgQGN1cnJlbnRGb3JtSGVhZGVyIGFzIGFuIG9ic2VydmFibGUsIHdoaWNoIGVtaXRzIHRoZSBjdXJyZW50IGZvcm0gaGVhZGVyKHVwZGF0ZWQgaGVhZGVyKVxuICAgICogICBhbmQgY2FuIGJlIHN1YnNjcmliZWQgYnkgYW55IGNvbXBvbmVudC5cbiAgICAqL1xuICAgIHB1YmxpYyBtZXRhQ29uZmlnSGVhZGVyU291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KHRoaXMubWV0YUNvbmZpZ0hlYWRlcik7XG4gICAgY3VycmVudE1ldGFDb25maWdIZWFkZXIgPSB0aGlzLm1ldGFDb25maWdIZWFkZXJTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBnZXQgZ2V0TWV0YUNvbmZpZ0hlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YUNvbmZpZ0hlYWRlcjtcbiAgICB9XG5cbiAgICBzZXQgc2V0TWV0YUNvbmZpZ0hlYWRlcihtZXRhQ29uZmlnSGVhZGVyOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5tZXRhQ29uZmlnSGVhZGVyID0gbWV0YUNvbmZpZ0hlYWRlcjtcbiAgICAgICAgdGhpcy5tZXRhQ29uZmlnSGVhZGVyU291cmNlLm5leHQodGhpcy5tZXRhQ29uZmlnSGVhZGVyKTsgIFxuICAgIH1cblxufSJdfQ==