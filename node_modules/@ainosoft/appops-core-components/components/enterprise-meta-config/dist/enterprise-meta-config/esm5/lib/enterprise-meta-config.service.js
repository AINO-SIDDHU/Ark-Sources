/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-meta-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MetaConfig } from '../config/MetaConfig';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../config/MetaConfig";
var EnterpriseMetaConfigService = /** @class */ (function () {
    function EnterpriseMetaConfigService(metaConfigComp) {
        this.metaConfigComp = metaConfigComp;
        this.attrGroupListSource = new BehaviorSubject(this.attributeGroupList);
        this.currentAttrGroupList = this.attrGroupListSource.asObservable();
        this.attrOptionListSource = new BehaviorSubject(this.attributeOptionList);
        this.currentAttrOptionList = this.attrOptionListSource.asObservable();
        this.enableFormSource = new BehaviorSubject(this.enableForm);
        this.currentEnableFormValue = this.enableFormSource.asObservable();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseMetaConfigService.prototype.enableOpenFormAction = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.enableForm = value;
        this.enableFormSource.next(this.enableForm);
    };
    /**
     * @param {?} metaConfigHeader
     * @return {?}
     */
    EnterpriseMetaConfigService.prototype.setMetaConfigHeader = /**
     * @param {?} metaConfigHeader
     * @return {?}
     */
    function (metaConfigHeader) {
        this.metaConfigComp.setMetaConfigHeader = metaConfigHeader;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    EnterpriseMetaConfigService.prototype.setAttrGroupList = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.attributeGroupList = new Array();
        for (var i = 0; i < data.length; i++) {
            this.attributeGroupList.push(data[i]);
        }
        this.attrGroupListSource.next(this.attributeGroupList);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    EnterpriseMetaConfigService.prototype.setAttrOptionList = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.attributeOptionList = new Array();
        for (var i = 0; i < data.length; i++) {
            this.attributeOptionList.push(data[i]);
        }
        this.attrOptionListSource.next(this.attributeOptionList);
    };
    EnterpriseMetaConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EnterpriseMetaConfigService.ctorParameters = function () { return [
        { type: MetaConfig }
    ]; };
    /** @nocollapse */ EnterpriseMetaConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function EnterpriseMetaConfigService_Factory() { return new EnterpriseMetaConfigService(i0.ɵɵinject(i1.MetaConfig)); }, token: EnterpriseMetaConfigService, providedIn: "root" });
    return EnterpriseMetaConfigService;
}());
export { EnterpriseMetaConfigService };
if (false) {
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attributeGroupList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attributeOptionList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.enableForm;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attrGroupListSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentAttrGroupList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attrOptionListSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentAttrOptionList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.enableFormSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentEnableFormValue;
    /**
     * @type {?}
     * @private
     */
    EnterpriseMetaConfigService.prototype.metaConfigComp;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZS1tZXRhLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZW50ZXJwcmlzZS1tZXRhLWNvbmZpZy8iLCJzb3VyY2VzIjpbImxpYi9lbnRlcnByaXNlLW1ldGEtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFFdkM7SUFTRSxxQ0FBb0IsY0FBMkI7UUFBM0IsbUJBQWMsR0FBZCxjQUFjLENBQWE7UUFFeEMsd0JBQW1CLEdBQUcsSUFBSSxlQUFlLENBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDakYseUJBQW9CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXhELHlCQUFvQixHQUFHLElBQUksZUFBZSxDQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25GLDBCQUFxQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUxRCxxQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEUsMkJBQXNCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBVFgsQ0FBQzs7Ozs7SUFXcEQsMERBQW9COzs7O0lBQXBCLFVBQXFCLEtBQWM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFRCx5REFBbUI7Ozs7SUFBbkIsVUFBb0IsZ0JBQXdCO1FBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFRCxzREFBZ0I7Ozs7SUFBaEIsVUFBaUIsSUFBVztRQUMxQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN0QyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7OztJQUVELHVEQUFpQjs7OztJQUFqQixVQUFrQixJQUFXO1FBQzNCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEM7UUFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNELENBQUM7O2dCQTNDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUxRLFVBQVU7OztzQ0FEbkI7Q0FnREMsQUE1Q0QsSUE0Q0M7U0F6Q1ksMkJBQTJCOzs7SUFFdEMseURBQTZCOztJQUM3QiwwREFBOEI7O0lBQzlCLGlEQUFvQjs7SUFJcEIsMERBQWlGOztJQUNqRiwyREFBK0Q7O0lBRS9ELDJEQUFtRjs7SUFDbkYsNERBQWlFOztJQUVqRSx1REFBd0U7O0lBQ3hFLDZEQUE4RDs7Ozs7SUFUbEQscURBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWV0YUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9NZXRhQ29uZmlnJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFbnRlcnByaXNlTWV0YUNvbmZpZ1NlcnZpY2Uge1xuXG4gIGF0dHJpYnV0ZUdyb3VwTGlzdDogU3RyaW5nW107XG4gIGF0dHJpYnV0ZU9wdGlvbkxpc3Q6IFN0cmluZ1tdO1xuICBlbmFibGVGb3JtOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWV0YUNvbmZpZ0NvbXA/OiBNZXRhQ29uZmlnKSB7IH1cblxuICBwdWJsaWMgYXR0ckdyb3VwTGlzdFNvdXJjZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55W10+KHRoaXMuYXR0cmlidXRlR3JvdXBMaXN0KTtcbiAgY3VycmVudEF0dHJHcm91cExpc3QgPSB0aGlzLmF0dHJHcm91cExpc3RTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgcHVibGljIGF0dHJPcHRpb25MaXN0U291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnlbXT4odGhpcy5hdHRyaWJ1dGVPcHRpb25MaXN0KTtcbiAgY3VycmVudEF0dHJPcHRpb25MaXN0ID0gdGhpcy5hdHRyT3B0aW9uTGlzdFNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICBwdWJsaWMgZW5hYmxlRm9ybVNvdXJjZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odGhpcy5lbmFibGVGb3JtKTtcbiAgY3VycmVudEVuYWJsZUZvcm1WYWx1ZSA9IHRoaXMuZW5hYmxlRm9ybVNvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgXG4gIGVuYWJsZU9wZW5Gb3JtQWN0aW9uKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5lbmFibGVGb3JtID0gdmFsdWU7XG4gICAgdGhpcy5lbmFibGVGb3JtU291cmNlLm5leHQodGhpcy5lbmFibGVGb3JtKTtcbiAgfVxuICBcbiAgc2V0TWV0YUNvbmZpZ0hlYWRlcihtZXRhQ29uZmlnSGVhZGVyOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1ldGFDb25maWdDb21wLnNldE1ldGFDb25maWdIZWFkZXIgPSBtZXRhQ29uZmlnSGVhZGVyO1xuICB9XG5cbiAgc2V0QXR0ckdyb3VwTGlzdChkYXRhOiBhbnlbXSkge1xuICAgIHRoaXMuYXR0cmlidXRlR3JvdXBMaXN0ID0gbmV3IEFycmF5KCk7XG4gICAgZm9yKGxldCBpPTA7IGk8ZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVHcm91cExpc3QucHVzaChkYXRhW2ldKTtcbiAgICB9XG4gICAgdGhpcy5hdHRyR3JvdXBMaXN0U291cmNlLm5leHQodGhpcy5hdHRyaWJ1dGVHcm91cExpc3QpO1xuICB9XG5cbiAgc2V0QXR0ck9wdGlvbkxpc3QoZGF0YTogYW55W10pIHtcbiAgICB0aGlzLmF0dHJpYnV0ZU9wdGlvbkxpc3QgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IobGV0IGk9MDsgaTxkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZU9wdGlvbkxpc3QucHVzaChkYXRhW2ldKTtcbiAgICB9XG4gICAgdGhpcy5hdHRyT3B0aW9uTGlzdFNvdXJjZS5uZXh0KHRoaXMuYXR0cmlidXRlT3B0aW9uTGlzdCk7XG4gIH1cbn1cbiJdfQ==