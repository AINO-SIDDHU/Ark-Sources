import { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs';
import { Validators, FormBuilder } from '@angular/forms';
import { A11yModule } from '@angular/cdk/a11y';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: config/MetaConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MetaConfig {
    constructor() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.metaConfigHeaderSource = new BehaviorSubject(this.metaConfigHeader);
        this.currentMetaConfigHeader = this.metaConfigHeaderSource.asObservable();
    }
    /**
     * @return {?}
     */
    get getMetaConfigHeader() {
        return this.metaConfigHeader;
    }
    /**
     * @param {?} metaConfigHeader
     * @return {?}
     */
    set setMetaConfigHeader(metaConfigHeader) {
        this.metaConfigHeader = metaConfigHeader;
        this.metaConfigHeaderSource.next(this.metaConfigHeader);
    }
}
MetaConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ MetaConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function MetaConfig_Factory() { return new MetaConfig(); }, token: MetaConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    MetaConfig.prototype.metaConfigHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    MetaConfig.prototype.metaConfigHeaderSource;
    /** @type {?} */
    MetaConfig.prototype.currentMetaConfigHeader;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-meta-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnterpriseMetaConfigService {
    /**
     * @param {?=} metaConfigComp
     */
    constructor(metaConfigComp) {
        this.metaConfigComp = metaConfigComp;
        this.attrGroupListSource = new BehaviorSubject$1(this.attributeGroupList);
        this.currentAttrGroupList = this.attrGroupListSource.asObservable();
        this.attrOptionListSource = new BehaviorSubject$1(this.attributeOptionList);
        this.currentAttrOptionList = this.attrOptionListSource.asObservable();
        this.enableFormSource = new BehaviorSubject$1(this.enableForm);
        this.currentEnableFormValue = this.enableFormSource.asObservable();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableOpenFormAction(value) {
        this.enableForm = value;
        this.enableFormSource.next(this.enableForm);
    }
    /**
     * @param {?} metaConfigHeader
     * @return {?}
     */
    setMetaConfigHeader(metaConfigHeader) {
        this.metaConfigComp.setMetaConfigHeader = metaConfigHeader;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setAttrGroupList(data) {
        this.attributeGroupList = new Array();
        for (let i = 0; i < data.length; i++) {
            this.attributeGroupList.push(data[i]);
        }
        this.attrGroupListSource.next(this.attributeGroupList);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setAttrOptionList(data) {
        this.attributeOptionList = new Array();
        for (let i = 0; i < data.length; i++) {
            this.attributeOptionList.push(data[i]);
        }
        this.attrOptionListSource.next(this.attributeOptionList);
    }
}
EnterpriseMetaConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EnterpriseMetaConfigService.ctorParameters = () => [
    { type: MetaConfig }
];
/** @nocollapse */ EnterpriseMetaConfigService.ngInjectableDef = ɵɵdefineInjectable({ factory: function EnterpriseMetaConfigService_Factory() { return new EnterpriseMetaConfigService(ɵɵinject(MetaConfig)); }, token: EnterpriseMetaConfigService, providedIn: "root" });
if (false) {
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attributeGroupList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attributeOptionList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.enableForm;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attrGroupListSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentAttrGroupList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.attrOptionListSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentAttrOptionList;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.enableFormSource;
    /** @type {?} */
    EnterpriseMetaConfigService.prototype.currentEnableFormValue;
    /**
     * @type {?}
     * @private
     */
    EnterpriseMetaConfigService.prototype.metaConfigComp;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-meta-config.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnterpriseMetaConfigComponent {
    /**
     * @param {?} metaConfig
     * @param {?} enterMetaConfigService
     * @param {?} _formBuilder
     */
    constructor(metaConfig, enterMetaConfigService, _formBuilder) {
        this.metaConfig = metaConfig;
        this.enterMetaConfigService = enterMetaConfigService;
        this._formBuilder = _formBuilder;
        this.enableForm = false;
        this.currentSelector = 'Region selector';
        this.stepIndicatorNo = 1;
        this.selectorList = ['Region selector', 'Media selector', 'Service selector', 'Distribution selector', 'SAAS/PAAS selector',
            'Agency discount selector', 'Stream selector', 'Information details', 'Report selector', 'Social selector'];
        this.metaConfig.currentMetaConfigHeader.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.metaConfigHeader = data;
        }));
        this.enterMetaConfigService.currentAttrGroupList.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            for (let i = 0; i < data.length; i++) {
                for (let a in data[i]) {
                    this.attributeGroupList.push(data[i][a]);
                }
            }
            console.log(this.attributeGroupList);
        }));
        this.enterMetaConfigService.currentAttrOptionList.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            console.log(data, ' meta option list');
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', Validators.required]
        });
    }
    /**
     * @return {?}
     */
    backToSummary() {
        this.enterMetaConfigService.enableOpenFormAction(this.enableForm);
    }
    /**
     * @return {?}
     */
    prevSelector() {
        /** @type {?} */
        let formCard = (/** @type {?} */ (document.getElementsByClassName('form-card-content')[0]));
        formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';
        for (let i = 0; i < this.attributeGroupList.length; i++) {
            if (this.attributeGroupList[i] === this.currentSelector && i > 0) {
                this.stepIndicatorNo = i;
                i--;
                this.currentSelector = this.attributeGroupList[i];
            }
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            formCard.style.animation = '';
        }), 500);
    }
    /**
     * @return {?}
     */
    nextSelector() {
        /** @type {?} */
        let formCard = (/** @type {?} */ (document.getElementsByClassName('form-card-content')[0]));
        formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';
        for (let i = 0; i < this.attributeGroupList.length; i++) {
            for (let a in this.attributeGroupList[i]) {
                console.log(this.attributeGroupList[i][a]);
                if (a === this.currentSelector && i < this.attributeGroupList.length - 1) {
                    i++;
                    this.currentSelector = this.attributeGroupList[i][a];
                    this.stepIndicatorNo = i + 1;
                    // console.log(this.currentSelector, i);
                }
            }
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            formCard.style.animation = '';
        }), 500);
    }
}
EnterpriseMetaConfigComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-enterprise-meta-config',
                template: "<div class=\"formBgColor\">\n    <mat-toolbar style=\"background: #f0f1f3;\">\n        <button mat-icon-button class=\"back\" (click)=\"backToSummary()\">\n            <mat-icon matTooltip=\"back\">keyboard_backspace</mat-icon>\n        </button>\n        <h2 class=\"meta-config-header\">Configure {{metaConfigHeader}} details</h2>\n    </mat-toolbar>\n\n    <div class=\"form-card-container\">\n        <button mat-fab class=\"step-indicator\">{{stepIndicatorNo}}</button>\n\n        <!-- <svg class=\"progress-circle\" width=\"70\" height=\"70\">\n            <path d=\"m35,2.5c17.955803,0 32.5,14.544199 32.5,32.5c0,17.955803 -14.544197,32.5 -32.5,32.5c-17.955803,0 -32.5,-14.544197 -32.5,-32.5c0,-17.955801 14.544197,-32.5 32.5,-32.5z\"/>\n        </svg> -->\n\n        <div class=\"form-card-content\">\n            <form [formGroup]=\"firstFormGroup\" class=\"form-card\">\n                <mat-card-content>\n                    <p>\n                        <mat-form-field appearance=\"outline\" class=\"name-field\">\n                            <mat-label>{{currentSelector}}</mat-label>\n                            <mat-select formControlName=\"first2Ctrl\" required>\n                                <mat-option>1</mat-option>\n                                <mat-option>2</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </p>\n\n                    <button mat-stroked-button type=\"button\" class=\"prev-button\" (click)=\"prevSelector()\">\n                        <mat-icon>chevron_left</mat-icon>\n                    </button>\n\n                    <button mat-stroked-button type=\"button\" class=\"next-button\" (click)=\"nextSelector()\">\n                        <mat-icon>chevron_right</mat-icon>\n                    </button>\n                </mat-card-content>\n            </form>\n        </div>\n    </div>\n</div>",
                styles: [".formBgColor{background:#f0f1f3}.meta-config-header{color:#414c55;font-family:Questrial,sans-serif;font-weight:700;letter-spacing:1px}.form-card-container{height:73vh;margin:8px;-webkit-animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;background:#fff;display:-webkit-box;display:flex}@-webkit-keyframes slide-left{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}@keyframes slide-left{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}.form-card-content{background:#f0f1f3;width:50vw;height:50vh;margin-top:5%;box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}.form-card{padding:27px}.name-field{width:40%;font-family:Questrial,sans-serif}.next-button{background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif;float:right;position:relative;bottom:-102px}.next-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}.step-indicator{margin:5% 8%;background:#f0f1f3;width:72px;height:72px;font-size:x-large;color:#414c55}.prev-button{background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif;position:relative;bottom:-102px}.prev-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}"]
            }] }
];
/** @nocollapse */
EnterpriseMetaConfigComponent.ctorParameters = () => [
    { type: MetaConfig },
    { type: EnterpriseMetaConfigService },
    { type: FormBuilder }
];
if (false) {
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.metaConfigHeader;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.enableForm;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.firstFormGroup;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.currentSelector;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.stepIndicatorNo;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.attributeGroupList;
    /** @type {?} */
    EnterpriseMetaConfigComponent.prototype.selectorList;
    /**
     * @type {?}
     * @private
     */
    EnterpriseMetaConfigComponent.prototype.metaConfig;
    /**
     * @type {?}
     * @private
     */
    EnterpriseMetaConfigComponent.prototype.enterMetaConfigService;
    /**
     * @type {?}
     * @private
     */
    EnterpriseMetaConfigComponent.prototype._formBuilder;
}

/**
 * @fileoverview added by tsickle
 * Generated from: common/material-module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterialModuleSet {
}
MaterialModuleSet.decorators = [
    { type: NgModule, args: [{
                exports: [
                    A11yModule,
                    CdkStepperModule,
                    CdkTableModule,
                    CdkTreeModule,
                    DragDropModule,
                    MatAutocompleteModule,
                    MatBadgeModule,
                    MatBottomSheetModule,
                    MatButtonModule,
                    MatButtonToggleModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatChipsModule,
                    MatStepperModule,
                    MatDatepickerModule,
                    MatDialogModule,
                    MatDividerModule,
                    MatExpansionModule,
                    MatGridListModule,
                    MatIconModule,
                    MatInputModule,
                    MatListModule,
                    MatMenuModule,
                    MatNativeDateModule,
                    MatPaginatorModule,
                    MatProgressBarModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatRippleModule,
                    MatSelectModule,
                    MatSidenavModule,
                    MatSliderModule,
                    MatSlideToggleModule,
                    MatSnackBarModule,
                    MatSortModule,
                    MatTableModule,
                    MatTabsModule,
                    MatToolbarModule,
                    MatTooltipModule,
                    MatTreeModule,
                    PortalModule,
                    ScrollingModule,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-meta-config.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnterpriseMetaConfigModule {
}
EnterpriseMetaConfigModule.decorators = [
    { type: NgModule, args: [{
                declarations: [EnterpriseMetaConfigComponent],
                imports: [
                    MaterialModuleSet,
                    CommonModule,
                ],
                exports: [EnterpriseMetaConfigComponent],
                providers: [EnterpriseMetaConfigService],
                schemas: [
                    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: enterprise-meta-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { EnterpriseMetaConfigComponent, EnterpriseMetaConfigModule, EnterpriseMetaConfigService, MetaConfig as ɵa, MaterialModuleSet as ɵb };
//# sourceMappingURL=enterprise-meta-config.js.map
