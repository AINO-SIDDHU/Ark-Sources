{"version":3,"sources":["ng://enterprise-meta-config/config/MetaConfig.ts","ng://enterprise-meta-config/lib/enterprise-meta-config.service.ts","ng://enterprise-meta-config/lib/enterprise-meta-config.component.ts","ng://enterprise-meta-config/common/material-module.ts","ng://enterprise-meta-config/lib/enterprise-meta-config.module.ts"],"names":["MetaConfig","this","metaConfigHeaderSource","BehaviorSubject","metaConfigHeader","currentMetaConfigHeader","asObservable","Object","defineProperty","prototype","next","Injectable","args","providedIn","EnterpriseMetaConfigService","metaConfigComp","attrGroupListSource","attributeGroupList","currentAttrGroupList","attrOptionListSource","attributeOptionList","currentAttrOptionList","enableFormSource","enableForm","currentEnableFormValue","enableOpenFormAction","value","setMetaConfigHeader","setAttrGroupList","data","Array","i","length","push","setAttrOptionList","EnterpriseMetaConfigComponent","metaConfig","enterMetaConfigService","_formBuilder","_this","currentSelector","stepIndicatorNo","selectorList","subscribe","a","console","log","ngOnInit","firstFormGroup","group","firstCtrl","Validators","required","backToSummary","prevSelector","formCard","document","getElementsByClassName","style","animation","setTimeout","nextSelector","Component","selector","template","FormBuilder","MaterialModuleSet","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","EnterpriseMetaConfigModule","declarations","imports","CommonModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MetaConfig {\n\n    metaConfigHeader: string;\n\n    /** makes the @currentFormHeader as an observable, which emits the current form header(updated header)\n    *   and can be subscribed by any component.\n    */\n    public metaConfigHeaderSource = new BehaviorSubject<string>(this.metaConfigHeader);\n    currentMetaConfigHeader = this.metaConfigHeaderSource.asObservable();\n\n    get getMetaConfigHeader() {\n        return this.metaConfigHeader;\n    }\n\n    set setMetaConfigHeader(metaConfigHeader: string) {\n        this.metaConfigHeader = metaConfigHeader;\n        this.metaConfigHeaderSource.next(this.metaConfigHeader);  \n    }\n\n}","import { Injectable } from '@angular/core';\nimport { MetaConfig } from '../config/MetaConfig';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseMetaConfigService {\n\n  attributeGroupList: String[];\n  attributeOptionList: String[];\n  enableForm: boolean;\n\n  constructor(private metaConfigComp?: MetaConfig) { }\n\n  public attrGroupListSource = new BehaviorSubject<any[]>(this.attributeGroupList);\n  currentAttrGroupList = this.attrGroupListSource.asObservable();\n\n  public attrOptionListSource = new BehaviorSubject<any[]>(this.attributeOptionList);\n  currentAttrOptionList = this.attrOptionListSource.asObservable();\n\n  public enableFormSource = new BehaviorSubject<boolean>(this.enableForm);\n  currentEnableFormValue = this.enableFormSource.asObservable();\n  \n  enableOpenFormAction(value: boolean) {\n    this.enableForm = value;\n    this.enableFormSource.next(this.enableForm);\n  }\n  \n  setMetaConfigHeader(metaConfigHeader: string) {\n    this.metaConfigComp.setMetaConfigHeader = metaConfigHeader;\n  }\n\n  setAttrGroupList(data: any[]) {\n    this.attributeGroupList = new Array();\n    for(let i=0; i<data.length; i++) {\n      this.attributeGroupList.push(data[i]);\n    }\n    this.attrGroupListSource.next(this.attributeGroupList);\n  }\n\n  setAttrOptionList(data: any[]) {\n    this.attributeOptionList = new Array();\n    for(let i=0; i<data.length; i++) {\n      this.attributeOptionList.push(data[i]);\n    }\n    this.attrOptionListSource.next(this.attributeOptionList);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { EnterpriseMetaConfigService } from './enterprise-meta-config.service';\nimport { MetaConfig } from '../config/MetaConfig';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'lib-enterprise-meta-config',\n  templateUrl: './enterprise-meta-config.component.html',\n  styleUrls: ['./enterprise-meta-config.component.scss'],\n})\nexport class EnterpriseMetaConfigComponent implements OnInit {\n\n  metaConfigHeader: string;\n  enableForm = false;\n  firstFormGroup: FormGroup;\n  currentSelector: string = 'Region selector';\n  stepIndicatorNo: number = 1;\n  attributeGroupList;\n\n  selectorList = ['Region selector', 'Media selector', 'Service selector', 'Distribution selector', 'SAAS/PAAS selector',\n  'Agency discount selector', 'Stream selector', 'Information details', 'Report selector', 'Social selector'];\n\n  constructor(private metaConfig: MetaConfig, private enterMetaConfigService: EnterpriseMetaConfigService, private _formBuilder: FormBuilder) { \n\n    this.metaConfig.currentMetaConfigHeader.subscribe(data => {\n      this.metaConfigHeader = data;\n    });\n\n    this.enterMetaConfigService.currentAttrGroupList.subscribe(data => {\n    \n      for(let i=0; i< data.length; i++) {\n        for(let a in data[i]) {\n          this.attributeGroupList.push(data[i][a]);\n        }\n      }\n      console.log(this.attributeGroupList);\n    });\n    \n    this.enterMetaConfigService.currentAttrOptionList.subscribe(data => {\n      console.log(data, ' meta option list');\n    });\n  }\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    \n  }\n\n  backToSummary() {\n    this.enterMetaConfigService.enableOpenFormAction(this.enableForm);\n  }\n\n  prevSelector() {\n    let formCard = document.getElementsByClassName('form-card-content')[0] as HTMLElement;\n    formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';\n\n    for(let i=0; i< this.attributeGroupList.length; i++) {\n      if(this.attributeGroupList[i] === this.currentSelector && i > 0) {\n        this.stepIndicatorNo = i;\n        i--;\n        this.currentSelector = this.attributeGroupList[i];\n      }\n    }\n\n    setTimeout(function() {\n      formCard.style.animation = '';\n    }, 500);\n  }\n\n  nextSelector() {\n    let formCard = document.getElementsByClassName('form-card-content')[0] as HTMLElement;\n    formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';\n\n    for(let i=0; i< this.attributeGroupList.length; i++) {\n      for(let a in this.attributeGroupList[i]) {\n        console.log(this.attributeGroupList[i][a]);\n        if(a === this.currentSelector && i < this.attributeGroupList.length - 1) {\n        i++;\n      \n        this.currentSelector = this.attributeGroupList[i][a];\n        this.stepIndicatorNo = i+1;\n        // console.log(this.currentSelector, i);\n      }\n      }\n    }\n\n    setTimeout(function() {\n      formCard.style.animation = '';\n    }, 500);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModuleSet { \n  \n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { EnterpriseMetaConfigComponent } from './enterprise-meta-config.component';\nimport { EnterpriseMetaConfigService } from './enterprise-meta-config.service';\nimport { MaterialModuleSet } from \"../common/material-module\";\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [EnterpriseMetaConfigComponent],\n  imports: [\n    MaterialModuleSet,\n    CommonModule,\n  ],\n  exports: [EnterpriseMetaConfigComponent],\n  providers: [EnterpriseMetaConfigService],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA\n  ],\n})\nexport class EnterpriseMetaConfigModule { }\n"]}