(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/internal/BehaviorSubject'), require('rxjs'), require('@angular/forms'), require('@angular/cdk/a11y'), require('@angular/cdk/drag-drop'), require('@angular/cdk/portal'), require('@angular/cdk/scrolling'), require('@angular/cdk/stepper'), require('@angular/cdk/table'), require('@angular/cdk/tree'), require('@angular/material/autocomplete'), require('@angular/material/badge'), require('@angular/material/bottom-sheet'), require('@angular/material/button'), require('@angular/material/button-toggle'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/stepper'), require('@angular/material/datepicker'), require('@angular/material/dialog'), require('@angular/material/divider'), require('@angular/material/expansion'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/core'), require('@angular/material/paginator'), require('@angular/material/progress-bar'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/sidenav'), require('@angular/material/slider'), require('@angular/material/slide-toggle'), require('@angular/material/snack-bar'), require('@angular/material/sort'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/toolbar'), require('@angular/material/tooltip'), require('@angular/material/tree'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('enterprise-meta-config', ['exports', '@angular/core', 'rxjs/internal/BehaviorSubject', 'rxjs', '@angular/forms', '@angular/cdk/a11y', '@angular/cdk/drag-drop', '@angular/cdk/portal', '@angular/cdk/scrolling', '@angular/cdk/stepper', '@angular/cdk/table', '@angular/cdk/tree', '@angular/material/autocomplete', '@angular/material/badge', '@angular/material/bottom-sheet', '@angular/material/button', '@angular/material/button-toggle', '@angular/material/card', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/stepper', '@angular/material/datepicker', '@angular/material/dialog', '@angular/material/divider', '@angular/material/expansion', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/core', '@angular/material/paginator', '@angular/material/progress-bar', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/sidenav', '@angular/material/slider', '@angular/material/slide-toggle', '@angular/material/snack-bar', '@angular/material/sort', '@angular/material/table', '@angular/material/tabs', '@angular/material/toolbar', '@angular/material/tooltip', '@angular/material/tree', '@angular/common'], factory) :
    (global = global || self, factory(global['enterprise-meta-config'] = {}, global.ng.core, global.rxjs['internal/BehaviorSubject'], global.rxjs, global.ng.forms, global.ng.cdk.a11y, global.ng.cdk['drag-drop'], global.ng.cdk.portal, global.ng.cdk.scrolling, global.ng.cdk.stepper, global.ng.cdk.table, global.ng.cdk.tree, global.ng.material.autocomplete, global.ng.material.badge, global.ng.material['bottom-sheet'], global.ng.material.button, global.ng.material['button-toggle'], global.ng.material.card, global.ng.material.checkbox, global.ng.material.chips, global.ng.material.stepper, global.ng.material.datepicker, global.ng.material.dialog, global.ng.material.divider, global.ng.material.expansion, global.ng.material['grid-list'], global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.core, global.ng.material.paginator, global.ng.material['progress-bar'], global.ng.material['progress-spinner'], global.ng.material.radio, global.ng.material.select, global.ng.material.sidenav, global.ng.material.slider, global.ng.material['slide-toggle'], global.ng.material['snack-bar'], global.ng.material.sort, global.ng.material.table, global.ng.material.tabs, global.ng.material.toolbar, global.ng.material.tooltip, global.ng.material.tree, global.ng.common));
}(this, (function (exports, core, BehaviorSubject, rxjs, forms, a11y, dragDrop, portal, scrolling, stepper, table, tree, autocomplete, badge, bottomSheet, button, buttonToggle, card, checkbox, chips, stepper$1, datepicker, dialog, divider, expansion, gridList, icon, input, list, menu, core$1, paginator, progressBar, progressSpinner, radio, select, sidenav, slider, slideToggle, snackBar, sort, table$1, tabs, toolbar, tooltip, tree$1, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: config/MetaConfig.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MetaConfig = /** @class */ (function () {
        function MetaConfig() {
            /**
             * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
             *   and can be subscribed by any component.
             */
            this.metaConfigHeaderSource = new BehaviorSubject.BehaviorSubject(this.metaConfigHeader);
            this.currentMetaConfigHeader = this.metaConfigHeaderSource.asObservable();
        }
        Object.defineProperty(MetaConfig.prototype, "getMetaConfigHeader", {
            get: /**
             * @return {?}
             */
            function () {
                return this.metaConfigHeader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MetaConfig.prototype, "setMetaConfigHeader", {
            set: /**
             * @param {?} metaConfigHeader
             * @return {?}
             */
            function (metaConfigHeader) {
                this.metaConfigHeader = metaConfigHeader;
                this.metaConfigHeaderSource.next(this.metaConfigHeader);
            },
            enumerable: true,
            configurable: true
        });
        MetaConfig.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ MetaConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MetaConfig_Factory() { return new MetaConfig(); }, token: MetaConfig, providedIn: "root" });
        return MetaConfig;
    }());
    if (false) {
        /** @type {?} */
        MetaConfig.prototype.metaConfigHeader;
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         * @type {?}
         */
        MetaConfig.prototype.metaConfigHeaderSource;
        /** @type {?} */
        MetaConfig.prototype.currentMetaConfigHeader;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-meta-config.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseMetaConfigService = /** @class */ (function () {
        function EnterpriseMetaConfigService(metaConfigComp) {
            this.metaConfigComp = metaConfigComp;
            this.attrGroupListSource = new rxjs.BehaviorSubject(this.attributeGroupList);
            this.currentAttrGroupList = this.attrGroupListSource.asObservable();
            this.attrOptionListSource = new rxjs.BehaviorSubject(this.attributeOptionList);
            this.currentAttrOptionList = this.attrOptionListSource.asObservable();
            this.enableFormSource = new rxjs.BehaviorSubject(this.enableForm);
            this.currentEnableFormValue = this.enableFormSource.asObservable();
        }
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseMetaConfigService.prototype.enableOpenFormAction = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableForm = value;
            this.enableFormSource.next(this.enableForm);
        };
        /**
         * @param {?} metaConfigHeader
         * @return {?}
         */
        EnterpriseMetaConfigService.prototype.setMetaConfigHeader = /**
         * @param {?} metaConfigHeader
         * @return {?}
         */
        function (metaConfigHeader) {
            this.metaConfigComp.setMetaConfigHeader = metaConfigHeader;
        };
        /**
         * @param {?} data
         * @return {?}
         */
        EnterpriseMetaConfigService.prototype.setAttrGroupList = /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.attributeGroupList = new Array();
            for (var i = 0; i < data.length; i++) {
                this.attributeGroupList.push(data[i]);
            }
            this.attrGroupListSource.next(this.attributeGroupList);
        };
        /**
         * @param {?} data
         * @return {?}
         */
        EnterpriseMetaConfigService.prototype.setAttrOptionList = /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.attributeOptionList = new Array();
            for (var i = 0; i < data.length; i++) {
                this.attributeOptionList.push(data[i]);
            }
            this.attrOptionListSource.next(this.attributeOptionList);
        };
        EnterpriseMetaConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        EnterpriseMetaConfigService.ctorParameters = function () { return [
            { type: MetaConfig }
        ]; };
        /** @nocollapse */ EnterpriseMetaConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function EnterpriseMetaConfigService_Factory() { return new EnterpriseMetaConfigService(core.ɵɵinject(MetaConfig)); }, token: EnterpriseMetaConfigService, providedIn: "root" });
        return EnterpriseMetaConfigService;
    }());
    if (false) {
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.attributeGroupList;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.attributeOptionList;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.enableForm;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.attrGroupListSource;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.currentAttrGroupList;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.attrOptionListSource;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.currentAttrOptionList;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.enableFormSource;
        /** @type {?} */
        EnterpriseMetaConfigService.prototype.currentEnableFormValue;
        /**
         * @type {?}
         * @private
         */
        EnterpriseMetaConfigService.prototype.metaConfigComp;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-meta-config.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseMetaConfigComponent = /** @class */ (function () {
        function EnterpriseMetaConfigComponent(metaConfig, enterMetaConfigService, _formBuilder) {
            var _this = this;
            this.metaConfig = metaConfig;
            this.enterMetaConfigService = enterMetaConfigService;
            this._formBuilder = _formBuilder;
            this.enableForm = false;
            this.currentSelector = 'Region selector';
            this.stepIndicatorNo = 1;
            this.selectorList = ['Region selector', 'Media selector', 'Service selector', 'Distribution selector', 'SAAS/PAAS selector',
                'Agency discount selector', 'Stream selector', 'Information details', 'Report selector', 'Social selector'];
            this.metaConfig.currentMetaConfigHeader.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.metaConfigHeader = data;
            }));
            this.enterMetaConfigService.currentAttrGroupList.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    for (var a in data[i]) {
                        _this.attributeGroupList.push(data[i][a]);
                    }
                }
                console.log(_this.attributeGroupList);
            }));
            this.enterMetaConfigService.currentAttrOptionList.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                console.log(data, ' meta option list');
            }));
        }
        /**
         * @return {?}
         */
        EnterpriseMetaConfigComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.firstFormGroup = this._formBuilder.group({
                firstCtrl: ['', forms.Validators.required]
            });
        };
        /**
         * @return {?}
         */
        EnterpriseMetaConfigComponent.prototype.backToSummary = /**
         * @return {?}
         */
        function () {
            this.enterMetaConfigService.enableOpenFormAction(this.enableForm);
        };
        /**
         * @return {?}
         */
        EnterpriseMetaConfigComponent.prototype.prevSelector = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var formCard = (/** @type {?} */ (document.getElementsByClassName('form-card-content')[0]));
            formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';
            for (var i = 0; i < this.attributeGroupList.length; i++) {
                if (this.attributeGroupList[i] === this.currentSelector && i > 0) {
                    this.stepIndicatorNo = i;
                    i--;
                    this.currentSelector = this.attributeGroupList[i];
                }
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                formCard.style.animation = '';
            }), 500);
        };
        /**
         * @return {?}
         */
        EnterpriseMetaConfigComponent.prototype.nextSelector = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var formCard = (/** @type {?} */ (document.getElementsByClassName('form-card-content')[0]));
            formCard.style.animation = 'slide-left 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both';
            for (var i = 0; i < this.attributeGroupList.length; i++) {
                for (var a in this.attributeGroupList[i]) {
                    console.log(this.attributeGroupList[i][a]);
                    if (a === this.currentSelector && i < this.attributeGroupList.length - 1) {
                        i++;
                        this.currentSelector = this.attributeGroupList[i][a];
                        this.stepIndicatorNo = i + 1;
                        // console.log(this.currentSelector, i);
                    }
                }
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                formCard.style.animation = '';
            }), 500);
        };
        EnterpriseMetaConfigComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-enterprise-meta-config',
                        template: "<div class=\"formBgColor\">\n    <mat-toolbar style=\"background: #f0f1f3;\">\n        <button mat-icon-button class=\"back\" (click)=\"backToSummary()\">\n            <mat-icon matTooltip=\"back\">keyboard_backspace</mat-icon>\n        </button>\n        <h2 class=\"meta-config-header\">Configure {{metaConfigHeader}} details</h2>\n    </mat-toolbar>\n\n    <div class=\"form-card-container\">\n        <button mat-fab class=\"step-indicator\">{{stepIndicatorNo}}</button>\n\n        <!-- <svg class=\"progress-circle\" width=\"70\" height=\"70\">\n            <path d=\"m35,2.5c17.955803,0 32.5,14.544199 32.5,32.5c0,17.955803 -14.544197,32.5 -32.5,32.5c-17.955803,0 -32.5,-14.544197 -32.5,-32.5c0,-17.955801 14.544197,-32.5 32.5,-32.5z\"/>\n        </svg> -->\n\n        <div class=\"form-card-content\">\n            <form [formGroup]=\"firstFormGroup\" class=\"form-card\">\n                <mat-card-content>\n                    <p>\n                        <mat-form-field appearance=\"outline\" class=\"name-field\">\n                            <mat-label>{{currentSelector}}</mat-label>\n                            <mat-select formControlName=\"first2Ctrl\" required>\n                                <mat-option>1</mat-option>\n                                <mat-option>2</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </p>\n\n                    <button mat-stroked-button type=\"button\" class=\"prev-button\" (click)=\"prevSelector()\">\n                        <mat-icon>chevron_left</mat-icon>\n                    </button>\n\n                    <button mat-stroked-button type=\"button\" class=\"next-button\" (click)=\"nextSelector()\">\n                        <mat-icon>chevron_right</mat-icon>\n                    </button>\n                </mat-card-content>\n            </form>\n        </div>\n    </div>\n</div>",
                        styles: [".formBgColor{background:#f0f1f3}.meta-config-header{color:#414c55;font-family:Questrial,sans-serif;font-weight:700;letter-spacing:1px}.form-card-container{height:73vh;margin:8px;-webkit-animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;background:#fff;display:-webkit-box;display:flex}@-webkit-keyframes slide-left{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}@keyframes slide-left{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}.form-card-content{background:#f0f1f3;width:50vw;height:50vh;margin-top:5%;box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}.form-card{padding:27px}.name-field{width:40%;font-family:Questrial,sans-serif}.next-button{background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif;float:right;position:relative;bottom:-102px}.next-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}.step-indicator{margin:5% 8%;background:#f0f1f3;width:72px;height:72px;font-size:x-large;color:#414c55}.prev-button{background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif;position:relative;bottom:-102px}.prev-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}"]
                    }] }
        ];
        /** @nocollapse */
        EnterpriseMetaConfigComponent.ctorParameters = function () { return [
            { type: MetaConfig },
            { type: EnterpriseMetaConfigService },
            { type: forms.FormBuilder }
        ]; };
        return EnterpriseMetaConfigComponent;
    }());
    if (false) {
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.metaConfigHeader;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.enableForm;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.firstFormGroup;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.currentSelector;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.stepIndicatorNo;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.attributeGroupList;
        /** @type {?} */
        EnterpriseMetaConfigComponent.prototype.selectorList;
        /**
         * @type {?}
         * @private
         */
        EnterpriseMetaConfigComponent.prototype.metaConfig;
        /**
         * @type {?}
         * @private
         */
        EnterpriseMetaConfigComponent.prototype.enterMetaConfigService;
        /**
         * @type {?}
         * @private
         */
        EnterpriseMetaConfigComponent.prototype._formBuilder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: common/material-module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterialModuleSet = /** @class */ (function () {
        function MaterialModuleSet() {
        }
        MaterialModuleSet.decorators = [
            { type: core.NgModule, args: [{
                        exports: [
                            a11y.A11yModule,
                            stepper.CdkStepperModule,
                            table.CdkTableModule,
                            tree.CdkTreeModule,
                            dragDrop.DragDropModule,
                            autocomplete.MatAutocompleteModule,
                            badge.MatBadgeModule,
                            bottomSheet.MatBottomSheetModule,
                            button.MatButtonModule,
                            buttonToggle.MatButtonToggleModule,
                            card.MatCardModule,
                            checkbox.MatCheckboxModule,
                            chips.MatChipsModule,
                            stepper$1.MatStepperModule,
                            datepicker.MatDatepickerModule,
                            dialog.MatDialogModule,
                            divider.MatDividerModule,
                            expansion.MatExpansionModule,
                            gridList.MatGridListModule,
                            icon.MatIconModule,
                            input.MatInputModule,
                            list.MatListModule,
                            menu.MatMenuModule,
                            core$1.MatNativeDateModule,
                            paginator.MatPaginatorModule,
                            progressBar.MatProgressBarModule,
                            progressSpinner.MatProgressSpinnerModule,
                            radio.MatRadioModule,
                            core$1.MatRippleModule,
                            select.MatSelectModule,
                            sidenav.MatSidenavModule,
                            slider.MatSliderModule,
                            slideToggle.MatSlideToggleModule,
                            snackBar.MatSnackBarModule,
                            sort.MatSortModule,
                            table$1.MatTableModule,
                            tabs.MatTabsModule,
                            toolbar.MatToolbarModule,
                            tooltip.MatTooltipModule,
                            tree$1.MatTreeModule,
                            portal.PortalModule,
                            scrolling.ScrollingModule,
                        ]
                    },] }
        ];
        return MaterialModuleSet;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-meta-config.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseMetaConfigModule = /** @class */ (function () {
        function EnterpriseMetaConfigModule() {
        }
        EnterpriseMetaConfigModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [EnterpriseMetaConfigComponent],
                        imports: [
                            MaterialModuleSet,
                            common.CommonModule,
                        ],
                        exports: [EnterpriseMetaConfigComponent],
                        providers: [EnterpriseMetaConfigService],
                        schemas: [
                            core.CUSTOM_ELEMENTS_SCHEMA, core.NO_ERRORS_SCHEMA
                        ],
                    },] }
        ];
        return EnterpriseMetaConfigModule;
    }());

    exports.EnterpriseMetaConfigComponent = EnterpriseMetaConfigComponent;
    exports.EnterpriseMetaConfigModule = EnterpriseMetaConfigModule;
    exports.EnterpriseMetaConfigService = EnterpriseMetaConfigService;
    exports.ɵa = MetaConfig;
    exports.ɵb = MaterialModuleSet;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=enterprise-meta-config.umd.js.map
