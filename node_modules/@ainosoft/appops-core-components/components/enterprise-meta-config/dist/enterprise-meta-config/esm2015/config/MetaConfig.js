/**
 * @fileoverview added by tsickle
 * Generated from: config/MetaConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs/internal/BehaviorSubject";
import * as i0 from "@angular/core";
export class MetaConfig {
    constructor() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.metaConfigHeaderSource = new BehaviorSubject(this.metaConfigHeader);
        this.currentMetaConfigHeader = this.metaConfigHeaderSource.asObservable();
    }
    /**
     * @return {?}
     */
    get getMetaConfigHeader() {
        return this.metaConfigHeader;
    }
    /**
     * @param {?} metaConfigHeader
     * @return {?}
     */
    set setMetaConfigHeader(metaConfigHeader) {
        this.metaConfigHeader = metaConfigHeader;
        this.metaConfigHeaderSource.next(this.metaConfigHeader);
    }
}
MetaConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ MetaConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MetaConfig_Factory() { return new MetaConfig(); }, token: MetaConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    MetaConfig.prototype.metaConfigHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    MetaConfig.prototype.metaConfigHeaderSource;
    /** @type {?} */
    MetaConfig.prototype.currentMetaConfigHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YUNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VudGVycHJpc2UtbWV0YS1jb25maWcvIiwic291cmNlcyI6WyJjb25maWcvTWV0YUNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUtoRSxNQUFNLE9BQU8sVUFBVTtJQUh2Qjs7Ozs7UUFVVywyQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNuRiw0QkFBdUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLENBQUM7S0FXeEU7Ozs7SUFURyxJQUFJLG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELElBQUksbUJBQW1CLENBQUMsZ0JBQXdCO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVELENBQUM7OztZQXBCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7O0lBR0csc0NBQXlCOzs7Ozs7SUFLekIsNENBQW1GOztJQUNuRiw2Q0FBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gXCJyeGpzL2ludGVybmFsL0JlaGF2aW9yU3ViamVjdFwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1ldGFDb25maWcge1xuXG4gICAgbWV0YUNvbmZpZ0hlYWRlcjogc3RyaW5nO1xuXG4gICAgLyoqIG1ha2VzIHRoZSBAY3VycmVudEZvcm1IZWFkZXIgYXMgYW4gb2JzZXJ2YWJsZSwgd2hpY2ggZW1pdHMgdGhlIGN1cnJlbnQgZm9ybSBoZWFkZXIodXBkYXRlZCBoZWFkZXIpXG4gICAgKiAgIGFuZCBjYW4gYmUgc3Vic2NyaWJlZCBieSBhbnkgY29tcG9uZW50LlxuICAgICovXG4gICAgcHVibGljIG1ldGFDb25maWdIZWFkZXJTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4odGhpcy5tZXRhQ29uZmlnSGVhZGVyKTtcbiAgICBjdXJyZW50TWV0YUNvbmZpZ0hlYWRlciA9IHRoaXMubWV0YUNvbmZpZ0hlYWRlclNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIGdldCBnZXRNZXRhQ29uZmlnSGVhZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhQ29uZmlnSGVhZGVyO1xuICAgIH1cblxuICAgIHNldCBzZXRNZXRhQ29uZmlnSGVhZGVyKG1ldGFDb25maWdIZWFkZXI6IHN0cmluZykge1xuICAgICAgICB0aGlzLm1ldGFDb25maWdIZWFkZXIgPSBtZXRhQ29uZmlnSGVhZGVyO1xuICAgICAgICB0aGlzLm1ldGFDb25maWdIZWFkZXJTb3VyY2UubmV4dCh0aGlzLm1ldGFDb25maWdIZWFkZXIpOyAgXG4gICAgfVxuXG59Il19