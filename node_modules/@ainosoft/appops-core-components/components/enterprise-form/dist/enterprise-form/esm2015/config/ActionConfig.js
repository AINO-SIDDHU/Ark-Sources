/**
 * @fileoverview added by tsickle
 * Generated from: config/ActionConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import * as i0 from "@angular/core";
export class ActionConfig {
    constructor() {
        /**
         * makes the \@currCreateIconValue as an observable, it emits the current boolean
         *  value for create icon, which can be subscribed by any component.
         */
        this.moduleNameSource = new BehaviorSubject(this.enableModuleName);
        this.currModuleNameValue = this.moduleNameSource.asObservable();
        this.userRoleSource = new BehaviorSubject(this.enableUserRole);
        this.currUserRoleValue = this.userRoleSource.asObservable();
        this.refPackageSource = new BehaviorSubject(this.enableRefPackage);
        this.currRefPackageValue = this.refPackageSource.asObservable();
        this.basePriceSource = new BehaviorSubject(this.enableBasePrice);
        this.curreBasePriceValue = this.basePriceSource.asObservable();
        this.subFrequencySource = new BehaviorSubject(this.enableSubFrequency);
        this.curreSubFrequencyValue = this.subFrequencySource.asObservable();
    }
    /**
     * @return {?}
     */
    get getModuleNameValue() {
        return this.enableModuleName;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setModuleNameValue(value) {
        this.enableModuleName = value;
        this.moduleNameSource.next(this.enableModuleName);
    }
    /**
     * @return {?}
     */
    get getUserRoleValue() {
        return this.enableUserRole;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setUserRoleValue(value) {
        this.enableUserRole = value;
        this.userRoleSource.next(this.enableUserRole);
    }
    /**
     * @return {?}
     */
    get getRefPackageValue() {
        return this.enableRefPackage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setRefPackageValue(value) {
        this.enableRefPackage = value;
        this.refPackageSource.next(this.enableRefPackage);
    }
    /**
     * @return {?}
     */
    get getBasePriceValue() {
        return this.enableBasePrice;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setBasePriceValue(value) {
        this.enableBasePrice = value;
        this.basePriceSource.next(this.enableBasePrice);
    }
    /**
     * @return {?}
     */
    get getSubFrequencyValue() {
        return this.enableSubFrequency;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setSubFrequencyValue(value) {
        this.enableSubFrequency = value;
        this.subFrequencySource.next(this.enableSubFrequency);
    }
}
ActionConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ActionConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ActionConfig_Factory() { return new ActionConfig(); }, token: ActionConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    ActionConfig.prototype.enableModuleName;
    /** @type {?} */
    ActionConfig.prototype.enableUserRole;
    /** @type {?} */
    ActionConfig.prototype.enableRefPackage;
    /** @type {?} */
    ActionConfig.prototype.enableBasePrice;
    /** @type {?} */
    ActionConfig.prototype.enableSubFrequency;
    /**
     * makes the \@currCreateIconValue as an observable, it emits the current boolean
     *  value for create icon, which can be subscribed by any component.
     * @type {?}
     */
    ActionConfig.prototype.moduleNameSource;
    /** @type {?} */
    ActionConfig.prototype.currModuleNameValue;
    /** @type {?} */
    ActionConfig.prototype.userRoleSource;
    /** @type {?} */
    ActionConfig.prototype.currUserRoleValue;
    /** @type {?} */
    ActionConfig.prototype.refPackageSource;
    /** @type {?} */
    ActionConfig.prototype.currRefPackageValue;
    /** @type {?} */
    ActionConfig.prototype.basePriceSource;
    /** @type {?} */
    ActionConfig.prototype.curreBasePriceValue;
    /** @type {?} */
    ActionConfig.prototype.subFrequencySource;
    /** @type {?} */
    ActionConfig.prototype.curreSubFrequencyValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aW9uQ29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZW50ZXJwcmlzZS1mb3JtLyIsInNvdXJjZXMiOlsiY29uZmlnL0FjdGlvbkNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLdkMsTUFBTSxPQUFPLFlBQVk7SUFIekI7Ozs7O1FBY1cscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUUsd0JBQW1CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBELG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFFLHNCQUFpQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFaEQscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUUsd0JBQW1CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVFLHdCQUFtQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFbkQsdUJBQWtCLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEYsMkJBQXNCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0tBOENuRTs7OztJQTVDRyxJQUFJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELElBQUksa0JBQWtCLENBQUMsS0FBYztRQUNqQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdEQsQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELElBQUksZ0JBQWdCLENBQUMsS0FBYztRQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7OztJQUVELElBQUksa0JBQWtCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsSUFBSSxrQkFBa0IsQ0FBQyxLQUFjO1FBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7O0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsSUFBSSxpQkFBaUIsQ0FBQyxLQUFjO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsSUFBSSxvQkFBb0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCxJQUFJLG9CQUFvQixDQUFDLEtBQWM7UUFDbkMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7OztZQXhFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7O0lBR0csd0NBQTBCOztJQUMxQixzQ0FBd0I7O0lBQ3hCLHdDQUEwQjs7SUFDMUIsdUNBQXlCOztJQUN6QiwwQ0FBNEI7Ozs7OztJQUs1Qix3Q0FBOEU7O0lBQzlFLDJDQUEyRDs7SUFFM0Qsc0NBQTBFOztJQUMxRSx5Q0FBdUQ7O0lBRXZELHdDQUE4RTs7SUFDOUUsMkNBQTJEOztJQUUzRCx1Q0FBNEU7O0lBQzVFLDJDQUEwRDs7SUFFMUQsMENBQWtGOztJQUNsRiw4Q0FBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uQ29uZmlnIHtcbiAgICBcbiAgICBlbmFibGVNb2R1bGVOYW1lOiBib29sZWFuO1xuICAgIGVuYWJsZVVzZXJSb2xlOiBib29sZWFuO1xuICAgIGVuYWJsZVJlZlBhY2thZ2U6IGJvb2xlYW47XG4gICAgZW5hYmxlQmFzZVByaWNlOiBib29sZWFuO1xuICAgIGVuYWJsZVN1YkZyZXF1ZW5jeTogYm9vbGVhbjtcblxuICAgIC8qKiBtYWtlcyB0aGUgQGN1cnJDcmVhdGVJY29uVmFsdWUgYXMgYW4gb2JzZXJ2YWJsZSwgaXQgZW1pdHMgdGhlIGN1cnJlbnQgYm9vbGVhbiBcbiAgICAgKiAgdmFsdWUgZm9yIGNyZWF0ZSBpY29uLCB3aGljaCBjYW4gYmUgc3Vic2NyaWJlZCBieSBhbnkgY29tcG9uZW50LlxuICAgICovXG4gICAgcHVibGljIG1vZHVsZU5hbWVTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRoaXMuZW5hYmxlTW9kdWxlTmFtZSk7XG4gICAgY3Vyck1vZHVsZU5hbWVWYWx1ZSA9IHRoaXMubW9kdWxlTmFtZVNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIHB1YmxpYyB1c2VyUm9sZVNvdXJjZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odGhpcy5lbmFibGVVc2VyUm9sZSk7XG4gICAgY3VyclVzZXJSb2xlVmFsdWUgPSB0aGlzLnVzZXJSb2xlU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgcHVibGljIHJlZlBhY2thZ2VTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRoaXMuZW5hYmxlUmVmUGFja2FnZSk7XG4gICAgY3VyclJlZlBhY2thZ2VWYWx1ZSA9IHRoaXMucmVmUGFja2FnZVNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIHB1YmxpYyBiYXNlUHJpY2VTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRoaXMuZW5hYmxlQmFzZVByaWNlKTtcbiAgICBjdXJyZUJhc2VQcmljZVZhbHVlID0gdGhpcy5iYXNlUHJpY2VTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBwdWJsaWMgc3ViRnJlcXVlbmN5U291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0aGlzLmVuYWJsZVN1YkZyZXF1ZW5jeSk7XG4gICAgY3VycmVTdWJGcmVxdWVuY3lWYWx1ZSA9IHRoaXMuc3ViRnJlcXVlbmN5U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgZ2V0IGdldE1vZHVsZU5hbWVWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlTW9kdWxlTmFtZTtcbiAgICB9XG5cbiAgICBzZXQgc2V0TW9kdWxlTmFtZVZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlTW9kdWxlTmFtZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm1vZHVsZU5hbWVTb3VyY2UubmV4dCh0aGlzLmVuYWJsZU1vZHVsZU5hbWUpO1xuICAgIH1cblxuICAgIGdldCBnZXRVc2VyUm9sZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVVc2VyUm9sZTtcbiAgICB9XG5cbiAgICBzZXQgc2V0VXNlclJvbGVWYWx1ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmVuYWJsZVVzZXJSb2xlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXNlclJvbGVTb3VyY2UubmV4dCh0aGlzLmVuYWJsZVVzZXJSb2xlKTtcbiAgICB9XG5cbiAgICBnZXQgZ2V0UmVmUGFja2FnZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVSZWZQYWNrYWdlO1xuICAgIH1cblxuICAgIHNldCBzZXRSZWZQYWNrYWdlVmFsdWUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5lbmFibGVSZWZQYWNrYWdlID0gdmFsdWU7XG4gICAgICAgIHRoaXMucmVmUGFja2FnZVNvdXJjZS5uZXh0KHRoaXMuZW5hYmxlUmVmUGFja2FnZSk7XG4gICAgfVxuXG4gICAgZ2V0IGdldEJhc2VQcmljZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVCYXNlUHJpY2U7XG4gICAgfVxuXG4gICAgc2V0IHNldEJhc2VQcmljZVZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlQmFzZVByaWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuYmFzZVByaWNlU291cmNlLm5leHQodGhpcy5lbmFibGVCYXNlUHJpY2UpO1xuICAgIH1cblxuICAgIGdldCBnZXRTdWJGcmVxdWVuY3lWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlU3ViRnJlcXVlbmN5O1xuICAgIH1cblxuICAgIHNldCBzZXRTdWJGcmVxdWVuY3lWYWx1ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmVuYWJsZVN1YkZyZXF1ZW5jeSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnN1YkZyZXF1ZW5jeVNvdXJjZS5uZXh0KHRoaXMuZW5hYmxlU3ViRnJlcXVlbmN5KTtcbiAgICB9XG59Il19