/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-form.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FormConfig } from '../config/FormConfig';
import { ActionConfig } from '../config/ActionConfig';
import * as i0 from "@angular/core";
import * as i1 from "../config/FormConfig";
import * as i2 from "../config/ActionConfig";
export class EnterpriseFormService {
    /**
     * @param {?=} formConfigComp
     * @param {?=} actionConfigComp
     */
    constructor(formConfigComp, actionConfigComp) {
        this.formConfigComp = formConfigComp;
        this.actionConfigComp = actionConfigComp;
        /**
         * makes the \@currentList as an observable, which emits the current list(updated list)
         *  and can be subscribed by any component.
         */
        this.moduleListSource = new BehaviorSubject(this.list);
        this.currentList = this.moduleListSource.asObservable();
        this.enableGridSource = new BehaviorSubject(this.enableGrid);
        this.currentEnableGridValue = this.enableGridSource.asObservable();
        this.enableMetaConfigSource = new BehaviorSubject(this.enableMetaConfig);
        this.currentEnableMetaConfigValue = this.enableMetaConfigSource.asObservable();
    }
    /**
     * sets the grid list/data provided by the respective external modules(apps/plugins).
     * @param {?} data
     * @return {?}
     */
    setFormList(data) {
        this.list = new Array();
        for (let i = 0; i < data.length; i++) {
            this.list.push(data[i]);
        }
        this.moduleListSource.next(this.list);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableOpenGridAction(value) {
        this.enableGrid = value;
        this.enableGridSource.next(this.enableGrid);
    }
    /**
     * sets the form header/name provided from their respective external modules(apps/plugins).
     * @param {?} formHeader
     * @return {?}
     */
    setFormHeader(formHeader) {
        this.formConfigComp.setFormHeader = formHeader;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableModuleName(value) {
        this.actionConfigComp.setModuleNameValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableUserRole(value) {
        this.actionConfigComp.setUserRoleValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableRefPackage(value) {
        this.actionConfigComp.setRefPackageValue = value;
        console.log(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableBasePrice(value) {
        this.actionConfigComp.setBasePriceValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableSubFrequency(value) {
        this.actionConfigComp.setSubFrequencyValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enableOpenMetaConfigAction(value) {
        this.enableMetaConfig = value;
        this.enableMetaConfigSource.next(this.enableMetaConfig);
    }
}
EnterpriseFormService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EnterpriseFormService.ctorParameters = () => [
    { type: FormConfig },
    { type: ActionConfig }
];
/** @nocollapse */ EnterpriseFormService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function EnterpriseFormService_Factory() { return new EnterpriseFormService(i0.ɵɵinject(i1.FormConfig), i0.ɵɵinject(i2.ActionConfig)); }, token: EnterpriseFormService, providedIn: "root" });
if (false) {
    /** @type {?} */
    EnterpriseFormService.prototype.list;
    /** @type {?} */
    EnterpriseFormService.prototype.enableGrid;
    /** @type {?} */
    EnterpriseFormService.prototype.enableMetaConfig;
    /**
     * makes the \@currentList as an observable, which emits the current list(updated list)
     *  and can be subscribed by any component.
     * @type {?}
     */
    EnterpriseFormService.prototype.moduleListSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentList;
    /** @type {?} */
    EnterpriseFormService.prototype.enableGridSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentEnableGridValue;
    /** @type {?} */
    EnterpriseFormService.prototype.enableMetaConfigSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentEnableMetaConfigValue;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormService.prototype.formConfigComp;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormService.prototype.actionConfigComp;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50ZXJwcmlzZS1mb3JtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9lbnRlcnByaXNlLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZW50ZXJwcmlzZS1mb3JtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7OztBQUt0RCxNQUFNLE9BQU8scUJBQXFCOzs7OztJQU1oQyxZQUFvQixjQUEyQixFQUFVLGdCQUErQjtRQUFwRSxtQkFBYyxHQUFkLGNBQWMsQ0FBYTtRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBZTs7Ozs7UUFLbEYscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLGdCQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRTNDLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4RSwyQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdkQsMkJBQXNCLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEYsaUNBQTRCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBWmtCLENBQUM7Ozs7OztJQWU1RixXQUFXLENBQUMsSUFBVztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFDLElBQUksS0FBSyxFQUFFLENBQUM7UUFDdEIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUM7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELG9CQUFvQixDQUFDLEtBQWM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7O0lBR0QsYUFBYSxDQUFDLFVBQWtCO1FBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLEtBQWM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNuRCxDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxLQUFjO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxLQUFjO1FBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxLQUFjO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCwwQkFBMEIsQ0FBQyxLQUFjO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7WUFsRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTFEsVUFBVTtZQUNWLFlBQVk7Ozs7O0lBT25CLHFDQUFlOztJQUNmLDJDQUFvQjs7SUFDcEIsaURBQTBCOzs7Ozs7SUFPM0IsaURBQWdFOztJQUNoRSw0Q0FBbUQ7O0lBRWxELGlEQUF3RTs7SUFDeEUsdURBQThEOztJQUU5RCx1REFBb0Y7O0lBQ3BGLDZEQUEwRTs7Ozs7SUFaOUQsK0NBQW1DOzs7OztJQUFFLGlEQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRm9ybUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9Gb3JtQ29uZmlnJztcbmltcG9ydCB7IEFjdGlvbkNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9BY3Rpb25Db25maWcnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFbnRlcnByaXNlRm9ybVNlcnZpY2Uge1xuXG4gIGxpc3Q6IFN0cmluZ1tdO1xuICBlbmFibGVHcmlkOiBib29sZWFuO1xuICBlbmFibGVNZXRhQ29uZmlnOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybUNvbmZpZ0NvbXA/OiBGb3JtQ29uZmlnLCBwcml2YXRlIGFjdGlvbkNvbmZpZ0NvbXA/OiBBY3Rpb25Db25maWcpIHsgfVxuXG4gICAvKiogbWFrZXMgdGhlIEBjdXJyZW50TGlzdCBhcyBhbiBvYnNlcnZhYmxlLCB3aGljaCBlbWl0cyB0aGUgY3VycmVudCBsaXN0KHVwZGF0ZWQgbGlzdClcbiAgICogIGFuZCBjYW4gYmUgc3Vic2NyaWJlZCBieSBhbnkgY29tcG9uZW50LlxuICAqL1xuIHB1YmxpYyBtb2R1bGVMaXN0U291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnlbXT4odGhpcy5saXN0KTtcbiBjdXJyZW50TGlzdCA9IHRoaXMubW9kdWxlTGlzdFNvdXJjZS5hc09ic2VydmFibGUoKTtcbiBcbiAgcHVibGljIGVuYWJsZUdyaWRTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRoaXMuZW5hYmxlR3JpZCk7XG4gIGN1cnJlbnRFbmFibGVHcmlkVmFsdWUgPSB0aGlzLmVuYWJsZUdyaWRTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgcHVibGljIGVuYWJsZU1ldGFDb25maWdTb3VyY2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRoaXMuZW5hYmxlTWV0YUNvbmZpZyk7XG4gIGN1cnJlbnRFbmFibGVNZXRhQ29uZmlnVmFsdWUgPSB0aGlzLmVuYWJsZU1ldGFDb25maWdTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gIFxuICAgLyoqIHNldHMgdGhlIGdyaWQgbGlzdC9kYXRhIHByb3ZpZGVkIGJ5IHRoZSByZXNwZWN0aXZlIGV4dGVybmFsIG1vZHVsZXMoYXBwcy9wbHVnaW5zKS4gKi9cbiAgIHNldEZvcm1MaXN0KGRhdGE6IGFueVtdKSB7XG4gICAgdGhpcy5saXN0PW5ldyBBcnJheSgpO1xuICAgIGZvcihsZXQgaT0wO2k8ZGF0YS5sZW5ndGg7aSsrKXtcbiAgICAgIHRoaXMubGlzdC5wdXNoKGRhdGFbaV0pO1xuICAgIH1cbiAgICB0aGlzLm1vZHVsZUxpc3RTb3VyY2UubmV4dCh0aGlzLmxpc3QpOyAgXG4gIH1cblxuICBlbmFibGVPcGVuR3JpZEFjdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuZW5hYmxlR3JpZCA9IHZhbHVlO1xuICAgIHRoaXMuZW5hYmxlR3JpZFNvdXJjZS5uZXh0KHRoaXMuZW5hYmxlR3JpZCk7XG4gIH1cblxuICAvKiogc2V0cyB0aGUgZm9ybSBoZWFkZXIvbmFtZSBwcm92aWRlZCBmcm9tIHRoZWlyIHJlc3BlY3RpdmUgZXh0ZXJuYWwgbW9kdWxlcyhhcHBzL3BsdWdpbnMpLiAqL1xuICBzZXRGb3JtSGVhZGVyKGZvcm1IZWFkZXI6IHN0cmluZykge1xuICAgIHRoaXMuZm9ybUNvbmZpZ0NvbXAuc2V0Rm9ybUhlYWRlciA9IGZvcm1IZWFkZXI7XG4gIH1cblxuICBlbmFibGVNb2R1bGVOYW1lKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5hY3Rpb25Db25maWdDb21wLnNldE1vZHVsZU5hbWVWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZW5hYmxlVXNlclJvbGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFjdGlvbkNvbmZpZ0NvbXAuc2V0VXNlclJvbGVWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZW5hYmxlUmVmUGFja2FnZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuYWN0aW9uQ29uZmlnQ29tcC5zZXRSZWZQYWNrYWdlVmFsdWUgPSB2YWx1ZTtcbiAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gIH1cblxuICBlbmFibGVCYXNlUHJpY2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFjdGlvbkNvbmZpZ0NvbXAuc2V0QmFzZVByaWNlVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGVuYWJsZVN1YkZyZXF1ZW5jeSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuYWN0aW9uQ29uZmlnQ29tcC5zZXRTdWJGcmVxdWVuY3lWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZW5hYmxlT3Blbk1ldGFDb25maWdBY3Rpb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmVuYWJsZU1ldGFDb25maWcgPSB2YWx1ZTtcbiAgICB0aGlzLmVuYWJsZU1ldGFDb25maWdTb3VyY2UubmV4dCh0aGlzLmVuYWJsZU1ldGFDb25maWcpO1xuICB9XG59XG4iXX0=