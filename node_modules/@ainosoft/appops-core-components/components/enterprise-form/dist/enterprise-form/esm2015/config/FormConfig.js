/**
 * @fileoverview added by tsickle
 * Generated from: config/FormConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs/internal/BehaviorSubject";
import * as i0 from "@angular/core";
export class FormConfig {
    constructor() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.formHeaderSource = new BehaviorSubject(this.formHeader);
        this.currentFormHeader = this.formHeaderSource.asObservable();
    }
    /**
     * @return {?}
     */
    get getFormHeader() {
        return this.formHeader;
    }
    /**
     * @param {?} formHeader
     * @return {?}
     */
    set setFormHeader(formHeader) {
        this.formHeader = formHeader;
        this.formHeaderSource.next(this.formHeader);
    }
}
FormConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ FormConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FormConfig_Factory() { return new FormConfig(); }, token: FormConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    FormConfig.prototype.formHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    FormConfig.prototype.formHeaderSource;
    /** @type {?} */
    FormConfig.prototype.currentFormHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybUNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VudGVycHJpc2UtZm9ybS8iLCJzb3VyY2VzIjpbImNvbmZpZy9Gb3JtQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBS2hFLE1BQU0sT0FBTyxVQUFVO0lBSHZCOzs7OztRQVVXLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RSxzQkFBaUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7S0FXNUQ7Ozs7SUFURyxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCxJQUFJLGFBQWEsQ0FBQyxVQUFrQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7WUFwQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7OztJQUdHLGdDQUFtQjs7Ozs7O0lBS25CLHNDQUF1RTs7SUFDdkUsdUNBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqcy9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3RcIjtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGb3JtQ29uZmlnIHtcblxuICAgIGZvcm1IZWFkZXI6IHN0cmluZztcblxuICAgIC8qKiBtYWtlcyB0aGUgQGN1cnJlbnRGb3JtSGVhZGVyIGFzIGFuIG9ic2VydmFibGUsIHdoaWNoIGVtaXRzIHRoZSBjdXJyZW50IGZvcm0gaGVhZGVyKHVwZGF0ZWQgaGVhZGVyKVxuICAgICogICBhbmQgY2FuIGJlIHN1YnNjcmliZWQgYnkgYW55IGNvbXBvbmVudC5cbiAgICAqL1xuICAgIHB1YmxpYyBmb3JtSGVhZGVyU291cmNlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KHRoaXMuZm9ybUhlYWRlcik7XG4gICAgY3VycmVudEZvcm1IZWFkZXIgPSB0aGlzLmZvcm1IZWFkZXJTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBnZXQgZ2V0Rm9ybUhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUhlYWRlcjtcbiAgICB9XG5cbiAgICBzZXQgc2V0Rm9ybUhlYWRlcihmb3JtSGVhZGVyOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5mb3JtSGVhZGVyID0gZm9ybUhlYWRlcjtcbiAgICAgICAgdGhpcy5mb3JtSGVhZGVyU291cmNlLm5leHQodGhpcy5mb3JtSGVhZGVyKTsgIFxuICAgIH1cblxufSJdfQ==