import { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { Validators, FormBuilder } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { A11yModule } from '@angular/cdk/a11y';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { PortalModule } from '@angular/cdk/portal';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CdkTableModule } from '@angular/cdk/table';
import { CdkTreeModule } from '@angular/cdk/tree';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatBadgeModule } from '@angular/material/badge';
import { MatBottomSheetModule } from '@angular/material/bottom-sheet';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatStepperModule } from '@angular/material/stepper';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDividerModule } from '@angular/material/divider';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSliderModule } from '@angular/material/slider';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatSortModule } from '@angular/material/sort';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeModule } from '@angular/material/tree';

/**
 * @fileoverview added by tsickle
 * Generated from: config/FormConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormConfig = /** @class */ (function () {
    function FormConfig() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.formHeaderSource = new BehaviorSubject(this.formHeader);
        this.currentFormHeader = this.formHeaderSource.asObservable();
    }
    Object.defineProperty(FormConfig.prototype, "getFormHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormConfig.prototype, "setFormHeader", {
        set: /**
         * @param {?} formHeader
         * @return {?}
         */
        function (formHeader) {
            this.formHeader = formHeader;
            this.formHeaderSource.next(this.formHeader);
        },
        enumerable: true,
        configurable: true
    });
    FormConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ FormConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function FormConfig_Factory() { return new FormConfig(); }, token: FormConfig, providedIn: "root" });
    return FormConfig;
}());
if (false) {
    /** @type {?} */
    FormConfig.prototype.formHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    FormConfig.prototype.formHeaderSource;
    /** @type {?} */
    FormConfig.prototype.currentFormHeader;
}

/**
 * @fileoverview added by tsickle
 * Generated from: config/ActionConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActionConfig = /** @class */ (function () {
    function ActionConfig() {
        /**
         * makes the \@currCreateIconValue as an observable, it emits the current boolean
         *  value for create icon, which can be subscribed by any component.
         */
        this.moduleNameSource = new BehaviorSubject$1(this.enableModuleName);
        this.currModuleNameValue = this.moduleNameSource.asObservable();
        this.userRoleSource = new BehaviorSubject$1(this.enableUserRole);
        this.currUserRoleValue = this.userRoleSource.asObservable();
        this.refPackageSource = new BehaviorSubject$1(this.enableRefPackage);
        this.currRefPackageValue = this.refPackageSource.asObservable();
        this.basePriceSource = new BehaviorSubject$1(this.enableBasePrice);
        this.curreBasePriceValue = this.basePriceSource.asObservable();
        this.subFrequencySource = new BehaviorSubject$1(this.enableSubFrequency);
        this.curreSubFrequencyValue = this.subFrequencySource.asObservable();
    }
    Object.defineProperty(ActionConfig.prototype, "getModuleNameValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableModuleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "setModuleNameValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableModuleName = value;
            this.moduleNameSource.next(this.enableModuleName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "getUserRoleValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableUserRole;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "setUserRoleValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableUserRole = value;
            this.userRoleSource.next(this.enableUserRole);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "getRefPackageValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableRefPackage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "setRefPackageValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableRefPackage = value;
            this.refPackageSource.next(this.enableRefPackage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "getBasePriceValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableBasePrice;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "setBasePriceValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableBasePrice = value;
            this.basePriceSource.next(this.enableBasePrice);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "getSubFrequencyValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableSubFrequency;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionConfig.prototype, "setSubFrequencyValue", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableSubFrequency = value;
            this.subFrequencySource.next(this.enableSubFrequency);
        },
        enumerable: true,
        configurable: true
    });
    ActionConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ActionConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function ActionConfig_Factory() { return new ActionConfig(); }, token: ActionConfig, providedIn: "root" });
    return ActionConfig;
}());
if (false) {
    /** @type {?} */
    ActionConfig.prototype.enableModuleName;
    /** @type {?} */
    ActionConfig.prototype.enableUserRole;
    /** @type {?} */
    ActionConfig.prototype.enableRefPackage;
    /** @type {?} */
    ActionConfig.prototype.enableBasePrice;
    /** @type {?} */
    ActionConfig.prototype.enableSubFrequency;
    /**
     * makes the \@currCreateIconValue as an observable, it emits the current boolean
     *  value for create icon, which can be subscribed by any component.
     * @type {?}
     */
    ActionConfig.prototype.moduleNameSource;
    /** @type {?} */
    ActionConfig.prototype.currModuleNameValue;
    /** @type {?} */
    ActionConfig.prototype.userRoleSource;
    /** @type {?} */
    ActionConfig.prototype.currUserRoleValue;
    /** @type {?} */
    ActionConfig.prototype.refPackageSource;
    /** @type {?} */
    ActionConfig.prototype.currRefPackageValue;
    /** @type {?} */
    ActionConfig.prototype.basePriceSource;
    /** @type {?} */
    ActionConfig.prototype.curreBasePriceValue;
    /** @type {?} */
    ActionConfig.prototype.subFrequencySource;
    /** @type {?} */
    ActionConfig.prototype.curreSubFrequencyValue;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-form.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EnterpriseFormService = /** @class */ (function () {
    function EnterpriseFormService(formConfigComp, actionConfigComp) {
        this.formConfigComp = formConfigComp;
        this.actionConfigComp = actionConfigComp;
        /**
         * makes the \@currentList as an observable, which emits the current list(updated list)
         *  and can be subscribed by any component.
         */
        this.moduleListSource = new BehaviorSubject$1(this.list);
        this.currentList = this.moduleListSource.asObservable();
        this.enableGridSource = new BehaviorSubject$1(this.enableGrid);
        this.currentEnableGridValue = this.enableGridSource.asObservable();
        this.enableMetaConfigSource = new BehaviorSubject$1(this.enableMetaConfig);
        this.currentEnableMetaConfigValue = this.enableMetaConfigSource.asObservable();
    }
    /** sets the grid list/data provided by the respective external modules(apps/plugins). */
    /**
     * sets the grid list/data provided by the respective external modules(apps/plugins).
     * @param {?} data
     * @return {?}
     */
    EnterpriseFormService.prototype.setFormList = /**
     * sets the grid list/data provided by the respective external modules(apps/plugins).
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.list = new Array();
        for (var i = 0; i < data.length; i++) {
            this.list.push(data[i]);
        }
        this.moduleListSource.next(this.list);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableOpenGridAction = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.enableGrid = value;
        this.enableGridSource.next(this.enableGrid);
    };
    /** sets the form header/name provided from their respective external modules(apps/plugins). */
    /**
     * sets the form header/name provided from their respective external modules(apps/plugins).
     * @param {?} formHeader
     * @return {?}
     */
    EnterpriseFormService.prototype.setFormHeader = /**
     * sets the form header/name provided from their respective external modules(apps/plugins).
     * @param {?} formHeader
     * @return {?}
     */
    function (formHeader) {
        this.formConfigComp.setFormHeader = formHeader;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableModuleName = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.actionConfigComp.setModuleNameValue = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableUserRole = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.actionConfigComp.setUserRoleValue = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableRefPackage = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.actionConfigComp.setRefPackageValue = value;
        console.log(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableBasePrice = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.actionConfigComp.setBasePriceValue = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableSubFrequency = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.actionConfigComp.setSubFrequencyValue = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnterpriseFormService.prototype.enableOpenMetaConfigAction = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.enableMetaConfig = value;
        this.enableMetaConfigSource.next(this.enableMetaConfig);
    };
    EnterpriseFormService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EnterpriseFormService.ctorParameters = function () { return [
        { type: FormConfig },
        { type: ActionConfig }
    ]; };
    /** @nocollapse */ EnterpriseFormService.ngInjectableDef = ɵɵdefineInjectable({ factory: function EnterpriseFormService_Factory() { return new EnterpriseFormService(ɵɵinject(FormConfig), ɵɵinject(ActionConfig)); }, token: EnterpriseFormService, providedIn: "root" });
    return EnterpriseFormService;
}());
if (false) {
    /** @type {?} */
    EnterpriseFormService.prototype.list;
    /** @type {?} */
    EnterpriseFormService.prototype.enableGrid;
    /** @type {?} */
    EnterpriseFormService.prototype.enableMetaConfig;
    /**
     * makes the \@currentList as an observable, which emits the current list(updated list)
     *  and can be subscribed by any component.
     * @type {?}
     */
    EnterpriseFormService.prototype.moduleListSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentList;
    /** @type {?} */
    EnterpriseFormService.prototype.enableGridSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentEnableGridValue;
    /** @type {?} */
    EnterpriseFormService.prototype.enableMetaConfigSource;
    /** @type {?} */
    EnterpriseFormService.prototype.currentEnableMetaConfigValue;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormService.prototype.formConfigComp;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormService.prototype.actionConfigComp;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EnterpriseFormComponent = /** @class */ (function () {
    function EnterpriseFormComponent(_formBuilder, enterpFormService, formConfig, actionConfig) {
        var _this = this;
        this._formBuilder = _formBuilder;
        this.enterpFormService = enterpFormService;
        this.formConfig = formConfig;
        this.actionConfig = actionConfig;
        this.isEditable = false;
        this.isLinear = true;
        this.enableGrid = false;
        this.referencePackageList = [];
        this.enableModuleName = false;
        this.enableUserRole = false;
        this.enableRefPackage = false;
        this.enableBasePrice = false;
        this.enableSubFrequency = false;
        this.enableMetaConfig = false;
        /** subscribes to the last emitted grid list (current list) from the behaviour subject
         *  @currentList observable instance.
         */
        this.enterpFormService.currentList.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data, 'form moduleList');
            for (var i in data) {
                if (data[i].status === 'ready' || data[i].status === 'subscribed') {
                    _this.referencePackageList.push(data[i].packageName);
                }
            }
        }));
        this.formConfig.currentFormHeader.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.formHeader = data;
        }));
        this.actionConfig.currModuleNameValue.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.enableModuleName = data;
        }));
        this.actionConfig.currUserRoleValue.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.enableUserRole = data;
        }));
        this.actionConfig.currRefPackageValue.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.enableRefPackage = data;
        }));
        this.actionConfig.curreBasePriceValue.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.enableBasePrice = data;
        }));
        this.actionConfig.curreSubFrequencyValue.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.enableSubFrequency = data;
        }));
    }
    /**
     * @return {?}
     */
    EnterpriseFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.firstFormGroup = this._formBuilder.group({
            firstCtrl: ['', Validators.required],
            first2Ctrl: ['', Validators.required],
        });
        this.secondFormGroup = this._formBuilder.group({
            secondCtrl: ['', Validators.required]
        });
    };
    /**
     * @return {?}
     */
    EnterpriseFormComponent.prototype.backToTable = /**
     * @return {?}
     */
    function () {
        this.enableGrid = true;
        this.enterpFormService.enableOpenGridAction(this.enableGrid);
    };
    /**
     * @return {?}
     */
    EnterpriseFormComponent.prototype.openMetaConfig = /**
     * @return {?}
     */
    function () {
        this.enableMetaConfig = true;
        this.enterpFormService.enableOpenMetaConfigAction(this.enableMetaConfig);
    };
    EnterpriseFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-enterprise-form',
                    template: "<div class=\"formBgColor\">\n    <mat-toolbar style=\"background: #f0f1f3;\">\n        <button mat-icon-button class=\"back\" (click)=\"backToTable()\">\n            <mat-icon matTooltip=\"back\">keyboard_backspace</mat-icon>\n        </button>\n        <h2 class=\"form-header\">Create new {{formHeader | lowercase }}</h2>\n    </mat-toolbar>\n\n    <div class=\"form-card-container\">\n        <form [formGroup]=\"firstFormGroup\" class=\"form-card\">\n            <h2 class=\"meta-header\">Summary</h2>\n            <mat-card-content>\n                <!-- Module Name -->\n                <p *ngIf=\"enableModuleName\">\n                    <mat-form-field appearance=\"outline\" class=\"name-field\">\n                        <mat-label>Name</mat-label>\n                        <input matInput placeholder=\"Name\" formControlName=\"firstCtrl\" required>\n                    </mat-form-field>\n                </p>\n\n                <!-- User Role -->\n                <p *ngIf=\"enableUserRole\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>{{formHeader }} role</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\">\n                            <mat-option value=\"Queries\">role 1</mat-option>\n                            <mat-option value=\"Items\">role 2</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n\n                <!-- User refrence package -->\n                <p *ngIf=\"enableRefPackage\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>Use reference {{formHeader | lowercase }}</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\" required>\n                            <mat-option>--select--</mat-option>\n                            <mat-option value=\"{{element}}\" *ngFor='let element of referencePackageList' >{{element}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n\n                <!-- Base Price -->\n                <p *ngIf=\"enableBasePrice\">\n                    <mat-form-field appearance=\"outline\" class=\"name-field\">\n                        <mat-label>Base price</mat-label>\n                        <input matInput placeholder=\"Base price\" formControlName=\"firstCtrl\" required>\n                        <i class=\"fa fa-euro\" style=\"font-size:22px\" matSuffix></i>\n                    </mat-form-field>\n                </p>\n\n                <!-- Subscription frequency -->\n                <p *ngIf=\"enableSubFrequency\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>Subscription frequency</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\">\n                            <mat-option value=\"Quaterly\">Monthly</mat-option>\n                            <mat-option value=\"Quaterly\">Quaterly</mat-option>\n                            <mat-option value=\"Half Year\">Half Yearly</mat-option>\n                            <mat-option value=\"Annually\">Annually</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n                <button mat-stroked-button type=\"button\" class=\"next-button\" (click)=\"openMetaConfig()\">{{formHeader | lowercase}} details\n                    <mat-icon>chevron_right</mat-icon>\n                </button>\n\n            </mat-card-content>\n        </form>\n    </div>\n</div>",
                    styles: [".formBgColor{background:#f0f1f3}.form-card-container{margin:8px;height:73vh;-webkit-animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;background:#fff}@-webkit-keyframes slide-left{from{transform:translateX(150px)}to{transform:translateX(5px)}}@keyframes slide-left{from{transform:translateX(150px)}to{transform:translateX(5px)}}.form-header{color:#414c55;font-family:Questrial,sans-serif;font-weight:700;letter-spacing:1px}.meta-header{color:#414c55;font-family:Questrial,sans-serif;letter-spacing:1px;font-weight:100}.form-card{padding:27px}.mat-option{font-size:smaller}.name-field,.select-field{width:40%;font-family:Questrial,sans-serif}.next-button{position:absolute;bottom:30px;right:50px;background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif}.next-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}"]
                }] }
    ];
    /** @nocollapse */
    EnterpriseFormComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: EnterpriseFormService },
        { type: FormConfig },
        { type: ActionConfig }
    ]; };
    return EnterpriseFormComponent;
}());
if (false) {
    /** @type {?} */
    EnterpriseFormComponent.prototype.firstFormGroup;
    /** @type {?} */
    EnterpriseFormComponent.prototype.secondFormGroup;
    /** @type {?} */
    EnterpriseFormComponent.prototype.isEditable;
    /** @type {?} */
    EnterpriseFormComponent.prototype.isLinear;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableGrid;
    /** @type {?} */
    EnterpriseFormComponent.prototype.formHeader;
    /** @type {?} */
    EnterpriseFormComponent.prototype.referencePackageList;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableModuleName;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableUserRole;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableRefPackage;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableBasePrice;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableSubFrequency;
    /** @type {?} */
    EnterpriseFormComponent.prototype.enableMetaConfig;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormComponent.prototype._formBuilder;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormComponent.prototype.enterpFormService;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormComponent.prototype.formConfig;
    /**
     * @type {?}
     * @private
     */
    EnterpriseFormComponent.prototype.actionConfig;
}

/**
 * @fileoverview added by tsickle
 * Generated from: common/material-module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MaterialModuleSet = /** @class */ (function () {
    function MaterialModuleSet() {
    }
    MaterialModuleSet.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        A11yModule,
                        CdkStepperModule,
                        CdkTableModule,
                        CdkTreeModule,
                        DragDropModule,
                        MatAutocompleteModule,
                        MatBadgeModule,
                        MatBottomSheetModule,
                        MatButtonModule,
                        MatButtonToggleModule,
                        MatCardModule,
                        MatCheckboxModule,
                        MatChipsModule,
                        MatStepperModule,
                        MatDatepickerModule,
                        MatDialogModule,
                        MatDividerModule,
                        MatExpansionModule,
                        MatGridListModule,
                        MatIconModule,
                        MatInputModule,
                        MatListModule,
                        MatMenuModule,
                        MatNativeDateModule,
                        MatPaginatorModule,
                        MatProgressBarModule,
                        MatProgressSpinnerModule,
                        MatRadioModule,
                        MatRippleModule,
                        MatSelectModule,
                        MatSidenavModule,
                        MatSliderModule,
                        MatSlideToggleModule,
                        MatSnackBarModule,
                        MatSortModule,
                        MatTableModule,
                        MatTabsModule,
                        MatToolbarModule,
                        MatTooltipModule,
                        MatTreeModule,
                        PortalModule,
                        ScrollingModule,
                    ]
                },] }
    ];
    return MaterialModuleSet;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-form.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EnterpriseFormModule = /** @class */ (function () {
    function EnterpriseFormModule() {
    }
    EnterpriseFormModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [EnterpriseFormComponent],
                    imports: [
                        MaterialModuleSet,
                        CommonModule,
                    ],
                    exports: [EnterpriseFormComponent],
                    providers: [EnterpriseFormService],
                    schemas: [
                        CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA
                    ],
                },] }
    ];
    return EnterpriseFormModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: enterprise-form.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { EnterpriseFormComponent, EnterpriseFormModule, EnterpriseFormService, FormConfig as ɵa, ActionConfig as ɵb, MaterialModuleSet as ɵc };
//# sourceMappingURL=enterprise-form.js.map
