/**
 * @fileoverview added by tsickle
 * Generated from: config/FormConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs/internal/BehaviorSubject";
import * as i0 from "@angular/core";
var FormConfig = /** @class */ (function () {
    function FormConfig() {
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         */
        this.formHeaderSource = new BehaviorSubject(this.formHeader);
        this.currentFormHeader = this.formHeaderSource.asObservable();
    }
    Object.defineProperty(FormConfig.prototype, "getFormHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormConfig.prototype, "setFormHeader", {
        set: /**
         * @param {?} formHeader
         * @return {?}
         */
        function (formHeader) {
            this.formHeader = formHeader;
            this.formHeaderSource.next(this.formHeader);
        },
        enumerable: true,
        configurable: true
    });
    FormConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ FormConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FormConfig_Factory() { return new FormConfig(); }, token: FormConfig, providedIn: "root" });
    return FormConfig;
}());
export { FormConfig };
if (false) {
    /** @type {?} */
    FormConfig.prototype.formHeader;
    /**
     * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
     *   and can be subscribed by any component.
     * @type {?}
     */
    FormConfig.prototype.formHeaderSource;
    /** @type {?} */
    FormConfig.prototype.currentFormHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybUNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VudGVycHJpc2UtZm9ybS8iLCJzb3VyY2VzIjpbImNvbmZpZy9Gb3JtQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBRWhFO0lBQUE7Ozs7O1FBVVcscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLHNCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztLQVc1RDtJQVRHLHNCQUFJLHFDQUFhOzs7O1FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQUkscUNBQWE7Ozs7O1FBQWpCLFVBQWtCLFVBQWtCO1lBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7OztPQUFBOztnQkFwQkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7O3FCQUxEO0NBeUJDLEFBdEJELElBc0JDO1NBbkJZLFVBQVU7OztJQUVuQixnQ0FBbUI7Ozs7OztJQUtuQixzQ0FBdUU7O0lBQ3ZFLHVDQUF5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSBcInJ4anMvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0XCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbmZpZyB7XG5cbiAgICBmb3JtSGVhZGVyOiBzdHJpbmc7XG5cbiAgICAvKiogbWFrZXMgdGhlIEBjdXJyZW50Rm9ybUhlYWRlciBhcyBhbiBvYnNlcnZhYmxlLCB3aGljaCBlbWl0cyB0aGUgY3VycmVudCBmb3JtIGhlYWRlcih1cGRhdGVkIGhlYWRlcilcbiAgICAqICAgYW5kIGNhbiBiZSBzdWJzY3JpYmVkIGJ5IGFueSBjb21wb25lbnQuXG4gICAgKi9cbiAgICBwdWJsaWMgZm9ybUhlYWRlclNvdXJjZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPih0aGlzLmZvcm1IZWFkZXIpO1xuICAgIGN1cnJlbnRGb3JtSGVhZGVyID0gdGhpcy5mb3JtSGVhZGVyU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgZ2V0IGdldEZvcm1IZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1IZWFkZXI7XG4gICAgfVxuXG4gICAgc2V0IHNldEZvcm1IZWFkZXIoZm9ybUhlYWRlcjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZm9ybUhlYWRlciA9IGZvcm1IZWFkZXI7XG4gICAgICAgIHRoaXMuZm9ybUhlYWRlclNvdXJjZS5uZXh0KHRoaXMuZm9ybUhlYWRlcik7ICBcbiAgICB9XG5cbn0iXX0=