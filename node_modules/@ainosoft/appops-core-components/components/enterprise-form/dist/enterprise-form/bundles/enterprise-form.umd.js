(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/internal/BehaviorSubject'), require('@angular/forms'), require('@angular/common'), require('@angular/cdk/a11y'), require('@angular/cdk/drag-drop'), require('@angular/cdk/portal'), require('@angular/cdk/scrolling'), require('@angular/cdk/stepper'), require('@angular/cdk/table'), require('@angular/cdk/tree'), require('@angular/material/autocomplete'), require('@angular/material/badge'), require('@angular/material/bottom-sheet'), require('@angular/material/button'), require('@angular/material/button-toggle'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/stepper'), require('@angular/material/datepicker'), require('@angular/material/dialog'), require('@angular/material/divider'), require('@angular/material/expansion'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/core'), require('@angular/material/paginator'), require('@angular/material/progress-bar'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/sidenav'), require('@angular/material/slider'), require('@angular/material/slide-toggle'), require('@angular/material/snack-bar'), require('@angular/material/sort'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/toolbar'), require('@angular/material/tooltip'), require('@angular/material/tree')) :
    typeof define === 'function' && define.amd ? define('enterprise-form', ['exports', '@angular/core', 'rxjs', 'rxjs/internal/BehaviorSubject', '@angular/forms', '@angular/common', '@angular/cdk/a11y', '@angular/cdk/drag-drop', '@angular/cdk/portal', '@angular/cdk/scrolling', '@angular/cdk/stepper', '@angular/cdk/table', '@angular/cdk/tree', '@angular/material/autocomplete', '@angular/material/badge', '@angular/material/bottom-sheet', '@angular/material/button', '@angular/material/button-toggle', '@angular/material/card', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/stepper', '@angular/material/datepicker', '@angular/material/dialog', '@angular/material/divider', '@angular/material/expansion', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/core', '@angular/material/paginator', '@angular/material/progress-bar', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/sidenav', '@angular/material/slider', '@angular/material/slide-toggle', '@angular/material/snack-bar', '@angular/material/sort', '@angular/material/table', '@angular/material/tabs', '@angular/material/toolbar', '@angular/material/tooltip', '@angular/material/tree'], factory) :
    (global = global || self, factory(global['enterprise-form'] = {}, global.ng.core, global.rxjs, global.rxjs['internal/BehaviorSubject'], global.ng.forms, global.ng.common, global.ng.cdk.a11y, global.ng.cdk['drag-drop'], global.ng.cdk.portal, global.ng.cdk.scrolling, global.ng.cdk.stepper, global.ng.cdk.table, global.ng.cdk.tree, global.ng.material.autocomplete, global.ng.material.badge, global.ng.material['bottom-sheet'], global.ng.material.button, global.ng.material['button-toggle'], global.ng.material.card, global.ng.material.checkbox, global.ng.material.chips, global.ng.material.stepper, global.ng.material.datepicker, global.ng.material.dialog, global.ng.material.divider, global.ng.material.expansion, global.ng.material['grid-list'], global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.core, global.ng.material.paginator, global.ng.material['progress-bar'], global.ng.material['progress-spinner'], global.ng.material.radio, global.ng.material.select, global.ng.material.sidenav, global.ng.material.slider, global.ng.material['slide-toggle'], global.ng.material['snack-bar'], global.ng.material.sort, global.ng.material.table, global.ng.material.tabs, global.ng.material.toolbar, global.ng.material.tooltip, global.ng.material.tree));
}(this, (function (exports, core, rxjs, BehaviorSubject, forms, common, a11y, dragDrop, portal, scrolling, stepper, table, tree, autocomplete, badge, bottomSheet, button, buttonToggle, card, checkbox, chips, stepper$1, datepicker, dialog, divider, expansion, gridList, icon, input, list, menu, core$1, paginator, progressBar, progressSpinner, radio, select, sidenav, slider, slideToggle, snackBar, sort, table$1, tabs, toolbar, tooltip, tree$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: config/FormConfig.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormConfig = /** @class */ (function () {
        function FormConfig() {
            /**
             * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
             *   and can be subscribed by any component.
             */
            this.formHeaderSource = new BehaviorSubject.BehaviorSubject(this.formHeader);
            this.currentFormHeader = this.formHeaderSource.asObservable();
        }
        Object.defineProperty(FormConfig.prototype, "getFormHeader", {
            get: /**
             * @return {?}
             */
            function () {
                return this.formHeader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormConfig.prototype, "setFormHeader", {
            set: /**
             * @param {?} formHeader
             * @return {?}
             */
            function (formHeader) {
                this.formHeader = formHeader;
                this.formHeaderSource.next(this.formHeader);
            },
            enumerable: true,
            configurable: true
        });
        FormConfig.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ FormConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function FormConfig_Factory() { return new FormConfig(); }, token: FormConfig, providedIn: "root" });
        return FormConfig;
    }());
    if (false) {
        /** @type {?} */
        FormConfig.prototype.formHeader;
        /**
         * makes the \@currentFormHeader as an observable, which emits the current form header(updated header)
         *   and can be subscribed by any component.
         * @type {?}
         */
        FormConfig.prototype.formHeaderSource;
        /** @type {?} */
        FormConfig.prototype.currentFormHeader;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: config/ActionConfig.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ActionConfig = /** @class */ (function () {
        function ActionConfig() {
            /**
             * makes the \@currCreateIconValue as an observable, it emits the current boolean
             *  value for create icon, which can be subscribed by any component.
             */
            this.moduleNameSource = new rxjs.BehaviorSubject(this.enableModuleName);
            this.currModuleNameValue = this.moduleNameSource.asObservable();
            this.userRoleSource = new rxjs.BehaviorSubject(this.enableUserRole);
            this.currUserRoleValue = this.userRoleSource.asObservable();
            this.refPackageSource = new rxjs.BehaviorSubject(this.enableRefPackage);
            this.currRefPackageValue = this.refPackageSource.asObservable();
            this.basePriceSource = new rxjs.BehaviorSubject(this.enableBasePrice);
            this.curreBasePriceValue = this.basePriceSource.asObservable();
            this.subFrequencySource = new rxjs.BehaviorSubject(this.enableSubFrequency);
            this.curreSubFrequencyValue = this.subFrequencySource.asObservable();
        }
        Object.defineProperty(ActionConfig.prototype, "getModuleNameValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.enableModuleName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "setModuleNameValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.enableModuleName = value;
                this.moduleNameSource.next(this.enableModuleName);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "getUserRoleValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.enableUserRole;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "setUserRoleValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.enableUserRole = value;
                this.userRoleSource.next(this.enableUserRole);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "getRefPackageValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.enableRefPackage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "setRefPackageValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.enableRefPackage = value;
                this.refPackageSource.next(this.enableRefPackage);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "getBasePriceValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.enableBasePrice;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "setBasePriceValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.enableBasePrice = value;
                this.basePriceSource.next(this.enableBasePrice);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "getSubFrequencyValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.enableSubFrequency;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionConfig.prototype, "setSubFrequencyValue", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.enableSubFrequency = value;
                this.subFrequencySource.next(this.enableSubFrequency);
            },
            enumerable: true,
            configurable: true
        });
        ActionConfig.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ActionConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ActionConfig_Factory() { return new ActionConfig(); }, token: ActionConfig, providedIn: "root" });
        return ActionConfig;
    }());
    if (false) {
        /** @type {?} */
        ActionConfig.prototype.enableModuleName;
        /** @type {?} */
        ActionConfig.prototype.enableUserRole;
        /** @type {?} */
        ActionConfig.prototype.enableRefPackage;
        /** @type {?} */
        ActionConfig.prototype.enableBasePrice;
        /** @type {?} */
        ActionConfig.prototype.enableSubFrequency;
        /**
         * makes the \@currCreateIconValue as an observable, it emits the current boolean
         *  value for create icon, which can be subscribed by any component.
         * @type {?}
         */
        ActionConfig.prototype.moduleNameSource;
        /** @type {?} */
        ActionConfig.prototype.currModuleNameValue;
        /** @type {?} */
        ActionConfig.prototype.userRoleSource;
        /** @type {?} */
        ActionConfig.prototype.currUserRoleValue;
        /** @type {?} */
        ActionConfig.prototype.refPackageSource;
        /** @type {?} */
        ActionConfig.prototype.currRefPackageValue;
        /** @type {?} */
        ActionConfig.prototype.basePriceSource;
        /** @type {?} */
        ActionConfig.prototype.curreBasePriceValue;
        /** @type {?} */
        ActionConfig.prototype.subFrequencySource;
        /** @type {?} */
        ActionConfig.prototype.curreSubFrequencyValue;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-form.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseFormService = /** @class */ (function () {
        function EnterpriseFormService(formConfigComp, actionConfigComp) {
            this.formConfigComp = formConfigComp;
            this.actionConfigComp = actionConfigComp;
            /**
             * makes the \@currentList as an observable, which emits the current list(updated list)
             *  and can be subscribed by any component.
             */
            this.moduleListSource = new rxjs.BehaviorSubject(this.list);
            this.currentList = this.moduleListSource.asObservable();
            this.enableGridSource = new rxjs.BehaviorSubject(this.enableGrid);
            this.currentEnableGridValue = this.enableGridSource.asObservable();
            this.enableMetaConfigSource = new rxjs.BehaviorSubject(this.enableMetaConfig);
            this.currentEnableMetaConfigValue = this.enableMetaConfigSource.asObservable();
        }
        /** sets the grid list/data provided by the respective external modules(apps/plugins). */
        /**
         * sets the grid list/data provided by the respective external modules(apps/plugins).
         * @param {?} data
         * @return {?}
         */
        EnterpriseFormService.prototype.setFormList = /**
         * sets the grid list/data provided by the respective external modules(apps/plugins).
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.list = new Array();
            for (var i = 0; i < data.length; i++) {
                this.list.push(data[i]);
            }
            this.moduleListSource.next(this.list);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableOpenGridAction = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableGrid = value;
            this.enableGridSource.next(this.enableGrid);
        };
        /** sets the form header/name provided from their respective external modules(apps/plugins). */
        /**
         * sets the form header/name provided from their respective external modules(apps/plugins).
         * @param {?} formHeader
         * @return {?}
         */
        EnterpriseFormService.prototype.setFormHeader = /**
         * sets the form header/name provided from their respective external modules(apps/plugins).
         * @param {?} formHeader
         * @return {?}
         */
        function (formHeader) {
            this.formConfigComp.setFormHeader = formHeader;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableModuleName = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionConfigComp.setModuleNameValue = value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableUserRole = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionConfigComp.setUserRoleValue = value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableRefPackage = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionConfigComp.setRefPackageValue = value;
            console.log(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableBasePrice = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionConfigComp.setBasePriceValue = value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableSubFrequency = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionConfigComp.setSubFrequencyValue = value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        EnterpriseFormService.prototype.enableOpenMetaConfigAction = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableMetaConfig = value;
            this.enableMetaConfigSource.next(this.enableMetaConfig);
        };
        EnterpriseFormService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        EnterpriseFormService.ctorParameters = function () { return [
            { type: FormConfig },
            { type: ActionConfig }
        ]; };
        /** @nocollapse */ EnterpriseFormService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function EnterpriseFormService_Factory() { return new EnterpriseFormService(core.ɵɵinject(FormConfig), core.ɵɵinject(ActionConfig)); }, token: EnterpriseFormService, providedIn: "root" });
        return EnterpriseFormService;
    }());
    if (false) {
        /** @type {?} */
        EnterpriseFormService.prototype.list;
        /** @type {?} */
        EnterpriseFormService.prototype.enableGrid;
        /** @type {?} */
        EnterpriseFormService.prototype.enableMetaConfig;
        /**
         * makes the \@currentList as an observable, which emits the current list(updated list)
         *  and can be subscribed by any component.
         * @type {?}
         */
        EnterpriseFormService.prototype.moduleListSource;
        /** @type {?} */
        EnterpriseFormService.prototype.currentList;
        /** @type {?} */
        EnterpriseFormService.prototype.enableGridSource;
        /** @type {?} */
        EnterpriseFormService.prototype.currentEnableGridValue;
        /** @type {?} */
        EnterpriseFormService.prototype.enableMetaConfigSource;
        /** @type {?} */
        EnterpriseFormService.prototype.currentEnableMetaConfigValue;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormService.prototype.formConfigComp;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormService.prototype.actionConfigComp;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-form.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseFormComponent = /** @class */ (function () {
        function EnterpriseFormComponent(_formBuilder, enterpFormService, formConfig, actionConfig) {
            var _this = this;
            this._formBuilder = _formBuilder;
            this.enterpFormService = enterpFormService;
            this.formConfig = formConfig;
            this.actionConfig = actionConfig;
            this.isEditable = false;
            this.isLinear = true;
            this.enableGrid = false;
            this.referencePackageList = [];
            this.enableModuleName = false;
            this.enableUserRole = false;
            this.enableRefPackage = false;
            this.enableBasePrice = false;
            this.enableSubFrequency = false;
            this.enableMetaConfig = false;
            /** subscribes to the last emitted grid list (current list) from the behaviour subject
             *  @currentList observable instance.
             */
            this.enterpFormService.currentList.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                console.log(data, 'form moduleList');
                for (var i in data) {
                    if (data[i].status === 'ready' || data[i].status === 'subscribed') {
                        _this.referencePackageList.push(data[i].packageName);
                    }
                }
            }));
            this.formConfig.currentFormHeader.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.formHeader = data;
            }));
            this.actionConfig.currModuleNameValue.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.enableModuleName = data;
            }));
            this.actionConfig.currUserRoleValue.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.enableUserRole = data;
            }));
            this.actionConfig.currRefPackageValue.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.enableRefPackage = data;
            }));
            this.actionConfig.curreBasePriceValue.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.enableBasePrice = data;
            }));
            this.actionConfig.curreSubFrequencyValue.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.enableSubFrequency = data;
            }));
        }
        /**
         * @return {?}
         */
        EnterpriseFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.firstFormGroup = this._formBuilder.group({
                firstCtrl: ['', forms.Validators.required],
                first2Ctrl: ['', forms.Validators.required],
            });
            this.secondFormGroup = this._formBuilder.group({
                secondCtrl: ['', forms.Validators.required]
            });
        };
        /**
         * @return {?}
         */
        EnterpriseFormComponent.prototype.backToTable = /**
         * @return {?}
         */
        function () {
            this.enableGrid = true;
            this.enterpFormService.enableOpenGridAction(this.enableGrid);
        };
        /**
         * @return {?}
         */
        EnterpriseFormComponent.prototype.openMetaConfig = /**
         * @return {?}
         */
        function () {
            this.enableMetaConfig = true;
            this.enterpFormService.enableOpenMetaConfigAction(this.enableMetaConfig);
        };
        EnterpriseFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-enterprise-form',
                        template: "<div class=\"formBgColor\">\n    <mat-toolbar style=\"background: #f0f1f3;\">\n        <button mat-icon-button class=\"back\" (click)=\"backToTable()\">\n            <mat-icon matTooltip=\"back\">keyboard_backspace</mat-icon>\n        </button>\n        <h2 class=\"form-header\">Create new {{formHeader | lowercase }}</h2>\n    </mat-toolbar>\n\n    <div class=\"form-card-container\">\n        <form [formGroup]=\"firstFormGroup\" class=\"form-card\">\n            <h2 class=\"meta-header\">Summary</h2>\n            <mat-card-content>\n                <!-- Module Name -->\n                <p *ngIf=\"enableModuleName\">\n                    <mat-form-field appearance=\"outline\" class=\"name-field\">\n                        <mat-label>Name</mat-label>\n                        <input matInput placeholder=\"Name\" formControlName=\"firstCtrl\" required>\n                    </mat-form-field>\n                </p>\n\n                <!-- User Role -->\n                <p *ngIf=\"enableUserRole\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>{{formHeader }} role</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\">\n                            <mat-option value=\"Queries\">role 1</mat-option>\n                            <mat-option value=\"Items\">role 2</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n\n                <!-- User refrence package -->\n                <p *ngIf=\"enableRefPackage\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>Use reference {{formHeader | lowercase }}</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\" required>\n                            <mat-option>--select--</mat-option>\n                            <mat-option value=\"{{element}}\" *ngFor='let element of referencePackageList' >{{element}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n\n                <!-- Base Price -->\n                <p *ngIf=\"enableBasePrice\">\n                    <mat-form-field appearance=\"outline\" class=\"name-field\">\n                        <mat-label>Base price</mat-label>\n                        <input matInput placeholder=\"Base price\" formControlName=\"firstCtrl\" required>\n                        <i class=\"fa fa-euro\" style=\"font-size:22px\" matSuffix></i>\n                    </mat-form-field>\n                </p>\n\n                <!-- Subscription frequency -->\n                <p *ngIf=\"enableSubFrequency\">\n                    <mat-form-field appearance=\"outline\" class=\"select-field\">\n                        <mat-label>Subscription frequency</mat-label>\n                        <mat-select formControlName=\"first2Ctrl\">\n                            <mat-option value=\"Quaterly\">Monthly</mat-option>\n                            <mat-option value=\"Quaterly\">Quaterly</mat-option>\n                            <mat-option value=\"Half Year\">Half Yearly</mat-option>\n                            <mat-option value=\"Annually\">Annually</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </p>\n                <button mat-stroked-button type=\"button\" class=\"next-button\" (click)=\"openMetaConfig()\">{{formHeader | lowercase}} details\n                    <mat-icon>chevron_right</mat-icon>\n                </button>\n\n            </mat-card-content>\n        </form>\n    </div>\n</div>",
                        styles: [".formBgColor{background:#f0f1f3}.form-card-container{margin:8px;height:73vh;-webkit-animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-left;background:#fff}@-webkit-keyframes slide-left{from{transform:translateX(150px)}to{transform:translateX(5px)}}@keyframes slide-left{from{transform:translateX(150px)}to{transform:translateX(5px)}}.form-header{color:#414c55;font-family:Questrial,sans-serif;font-weight:700;letter-spacing:1px}.meta-header{color:#414c55;font-family:Questrial,sans-serif;letter-spacing:1px;font-weight:100}.form-card{padding:27px}.mat-option{font-size:smaller}.name-field,.select-field{width:40%;font-family:Questrial,sans-serif}.next-button{position:absolute;bottom:30px;right:50px;background:#414c55;color:#fff;font-size:16px;outline:0;border:none;padding:5px 40px;font-family:Questrial,sans-serif}.next-button:hover{box-shadow:0 12px 16px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19)}"]
                    }] }
        ];
        /** @nocollapse */
        EnterpriseFormComponent.ctorParameters = function () { return [
            { type: forms.FormBuilder },
            { type: EnterpriseFormService },
            { type: FormConfig },
            { type: ActionConfig }
        ]; };
        return EnterpriseFormComponent;
    }());
    if (false) {
        /** @type {?} */
        EnterpriseFormComponent.prototype.firstFormGroup;
        /** @type {?} */
        EnterpriseFormComponent.prototype.secondFormGroup;
        /** @type {?} */
        EnterpriseFormComponent.prototype.isEditable;
        /** @type {?} */
        EnterpriseFormComponent.prototype.isLinear;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableGrid;
        /** @type {?} */
        EnterpriseFormComponent.prototype.formHeader;
        /** @type {?} */
        EnterpriseFormComponent.prototype.referencePackageList;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableModuleName;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableUserRole;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableRefPackage;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableBasePrice;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableSubFrequency;
        /** @type {?} */
        EnterpriseFormComponent.prototype.enableMetaConfig;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormComponent.prototype._formBuilder;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormComponent.prototype.enterpFormService;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormComponent.prototype.formConfig;
        /**
         * @type {?}
         * @private
         */
        EnterpriseFormComponent.prototype.actionConfig;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: common/material-module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterialModuleSet = /** @class */ (function () {
        function MaterialModuleSet() {
        }
        MaterialModuleSet.decorators = [
            { type: core.NgModule, args: [{
                        exports: [
                            a11y.A11yModule,
                            stepper.CdkStepperModule,
                            table.CdkTableModule,
                            tree.CdkTreeModule,
                            dragDrop.DragDropModule,
                            autocomplete.MatAutocompleteModule,
                            badge.MatBadgeModule,
                            bottomSheet.MatBottomSheetModule,
                            button.MatButtonModule,
                            buttonToggle.MatButtonToggleModule,
                            card.MatCardModule,
                            checkbox.MatCheckboxModule,
                            chips.MatChipsModule,
                            stepper$1.MatStepperModule,
                            datepicker.MatDatepickerModule,
                            dialog.MatDialogModule,
                            divider.MatDividerModule,
                            expansion.MatExpansionModule,
                            gridList.MatGridListModule,
                            icon.MatIconModule,
                            input.MatInputModule,
                            list.MatListModule,
                            menu.MatMenuModule,
                            core$1.MatNativeDateModule,
                            paginator.MatPaginatorModule,
                            progressBar.MatProgressBarModule,
                            progressSpinner.MatProgressSpinnerModule,
                            radio.MatRadioModule,
                            core$1.MatRippleModule,
                            select.MatSelectModule,
                            sidenav.MatSidenavModule,
                            slider.MatSliderModule,
                            slideToggle.MatSlideToggleModule,
                            snackBar.MatSnackBarModule,
                            sort.MatSortModule,
                            table$1.MatTableModule,
                            tabs.MatTabsModule,
                            toolbar.MatToolbarModule,
                            tooltip.MatTooltipModule,
                            tree$1.MatTreeModule,
                            portal.PortalModule,
                            scrolling.ScrollingModule,
                        ]
                    },] }
        ];
        return MaterialModuleSet;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/enterprise-form.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnterpriseFormModule = /** @class */ (function () {
        function EnterpriseFormModule() {
        }
        EnterpriseFormModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [EnterpriseFormComponent],
                        imports: [
                            MaterialModuleSet,
                            common.CommonModule,
                        ],
                        exports: [EnterpriseFormComponent],
                        providers: [EnterpriseFormService],
                        schemas: [
                            core.CUSTOM_ELEMENTS_SCHEMA, core.NO_ERRORS_SCHEMA
                        ],
                    },] }
        ];
        return EnterpriseFormModule;
    }());

    exports.EnterpriseFormComponent = EnterpriseFormComponent;
    exports.EnterpriseFormModule = EnterpriseFormModule;
    exports.EnterpriseFormService = EnterpriseFormService;
    exports.ɵa = FormConfig;
    exports.ɵb = ActionConfig;
    exports.ɵc = MaterialModuleSet;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=enterprise-form.umd.js.map
