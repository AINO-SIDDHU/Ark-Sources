{"version":3,"sources":["ng://enterprise-form/config/FormConfig.ts","ng://enterprise-form/config/ActionConfig.ts","ng://enterprise-form/lib/enterprise-form.service.ts","ng://enterprise-form/lib/enterprise-form.component.ts","ng://enterprise-form/common/material-module.ts","ng://enterprise-form/lib/enterprise-form.module.ts"],"names":["FormConfig","this","formHeaderSource","BehaviorSubject","formHeader","currentFormHeader","asObservable","Object","defineProperty","prototype","next","Injectable","args","providedIn","ActionConfig","moduleNameSource","enableModuleName","currModuleNameValue","userRoleSource","enableUserRole","currUserRoleValue","refPackageSource","enableRefPackage","currRefPackageValue","basePriceSource","enableBasePrice","curreBasePriceValue","subFrequencySource","enableSubFrequency","curreSubFrequencyValue","value","EnterpriseFormService","formConfigComp","actionConfigComp","moduleListSource","list","currentList","enableGridSource","enableGrid","currentEnableGridValue","enableMetaConfigSource","enableMetaConfig","currentEnableMetaConfigValue","setFormList","data","Array","i","length","push","enableOpenGridAction","setFormHeader","setModuleNameValue","setUserRoleValue","setRefPackageValue","console","log","setBasePriceValue","setSubFrequencyValue","enableOpenMetaConfigAction","EnterpriseFormComponent","_formBuilder","enterpFormService","formConfig","actionConfig","_this","isEditable","isLinear","referencePackageList","subscribe","status","packageName","ngOnInit","firstFormGroup","group","firstCtrl","Validators","required","first2Ctrl","secondFormGroup","secondCtrl","backToTable","openMetaConfig","Component","selector","template","FormBuilder","MaterialModuleSet","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","EnterpriseFormModule","declarations","imports","CommonModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormConfig {\n\n    formHeader: string;\n\n    /** makes the @currentFormHeader as an observable, which emits the current form header(updated header)\n    *   and can be subscribed by any component.\n    */\n    public formHeaderSource = new BehaviorSubject<string>(this.formHeader);\n    currentFormHeader = this.formHeaderSource.asObservable();\n\n    get getFormHeader() {\n        return this.formHeader;\n    }\n\n    set setFormHeader(formHeader: string) {\n        this.formHeader = formHeader;\n        this.formHeaderSource.next(this.formHeader);  \n    }\n\n}","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ActionConfig {\n    \n    enableModuleName: boolean;\n    enableUserRole: boolean;\n    enableRefPackage: boolean;\n    enableBasePrice: boolean;\n    enableSubFrequency: boolean;\n\n    /** makes the @currCreateIconValue as an observable, it emits the current boolean \n     *  value for create icon, which can be subscribed by any component.\n    */\n    public moduleNameSource = new BehaviorSubject<boolean>(this.enableModuleName);\n    currModuleNameValue = this.moduleNameSource.asObservable();\n\n    public userRoleSource = new BehaviorSubject<boolean>(this.enableUserRole);\n    currUserRoleValue = this.userRoleSource.asObservable();\n\n    public refPackageSource = new BehaviorSubject<boolean>(this.enableRefPackage);\n    currRefPackageValue = this.refPackageSource.asObservable();\n\n    public basePriceSource = new BehaviorSubject<boolean>(this.enableBasePrice);\n    curreBasePriceValue = this.basePriceSource.asObservable();\n\n    public subFrequencySource = new BehaviorSubject<boolean>(this.enableSubFrequency);\n    curreSubFrequencyValue = this.subFrequencySource.asObservable();\n\n    get getModuleNameValue() {\n        return this.enableModuleName;\n    }\n\n    set setModuleNameValue(value: boolean) {\n        this.enableModuleName = value;\n        this.moduleNameSource.next(this.enableModuleName);\n    }\n\n    get getUserRoleValue() {\n        return this.enableUserRole;\n    }\n\n    set setUserRoleValue(value: boolean) {\n        this.enableUserRole = value;\n        this.userRoleSource.next(this.enableUserRole);\n    }\n\n    get getRefPackageValue() {\n        return this.enableRefPackage;\n    }\n\n    set setRefPackageValue(value: boolean) {\n        this.enableRefPackage = value;\n        this.refPackageSource.next(this.enableRefPackage);\n    }\n\n    get getBasePriceValue() {\n        return this.enableBasePrice;\n    }\n\n    set setBasePriceValue(value: boolean) {\n        this.enableBasePrice = value;\n        this.basePriceSource.next(this.enableBasePrice);\n    }\n\n    get getSubFrequencyValue() {\n        return this.enableSubFrequency;\n    }\n\n    set setSubFrequencyValue(value: boolean) {\n        this.enableSubFrequency = value;\n        this.subFrequencySource.next(this.enableSubFrequency);\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { FormConfig } from '../config/FormConfig';\nimport { ActionConfig } from '../config/ActionConfig';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnterpriseFormService {\n\n  list: String[];\n  enableGrid: boolean;\n  enableMetaConfig: boolean;\n\n  constructor(private formConfigComp?: FormConfig, private actionConfigComp?: ActionConfig) { }\n\n   /** makes the @currentList as an observable, which emits the current list(updated list)\n   *  and can be subscribed by any component.\n  */\n public moduleListSource = new BehaviorSubject<any[]>(this.list);\n currentList = this.moduleListSource.asObservable();\n \n  public enableGridSource = new BehaviorSubject<boolean>(this.enableGrid);\n  currentEnableGridValue = this.enableGridSource.asObservable();\n\n  public enableMetaConfigSource = new BehaviorSubject<boolean>(this.enableMetaConfig);\n  currentEnableMetaConfigValue = this.enableMetaConfigSource.asObservable();\n  \n   /** sets the grid list/data provided by the respective external modules(apps/plugins). */\n   setFormList(data: any[]) {\n    this.list=new Array();\n    for(let i=0;i<data.length;i++){\n      this.list.push(data[i]);\n    }\n    this.moduleListSource.next(this.list);  \n  }\n\n  enableOpenGridAction(value: boolean) {\n    this.enableGrid = value;\n    this.enableGridSource.next(this.enableGrid);\n  }\n\n  /** sets the form header/name provided from their respective external modules(apps/plugins). */\n  setFormHeader(formHeader: string) {\n    this.formConfigComp.setFormHeader = formHeader;\n  }\n\n  enableModuleName(value: boolean) {\n    this.actionConfigComp.setModuleNameValue = value;\n  }\n\n  enableUserRole(value: boolean) {\n    this.actionConfigComp.setUserRoleValue = value;\n  }\n\n  enableRefPackage(value: boolean) {\n    this.actionConfigComp.setRefPackageValue = value;\n    console.log(value);\n  }\n\n  enableBasePrice(value: boolean) {\n    this.actionConfigComp.setBasePriceValue = value;\n  }\n\n  enableSubFrequency(value: boolean) {\n    this.actionConfigComp.setSubFrequencyValue = value;\n  }\n\n  enableOpenMetaConfigAction(value: boolean) {\n    this.enableMetaConfig = value;\n    this.enableMetaConfigSource.next(this.enableMetaConfig);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { EnterpriseFormService } from './enterprise-form.service';\nimport { FormConfig } from '../config/FormConfig';\nimport { ActionConfig } from '../config/ActionConfig';\n\n@Component({\n  selector: 'lib-enterprise-form',\n  templateUrl: './enterprise-form.component.html',\n  styleUrls: ['./enterprise-form.component.scss'],\n})\nexport class EnterpriseFormComponent implements OnInit {\n\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  isEditable = false;\n  isLinear = true;\n  enableGrid = false;\n  formHeader: string;\n  referencePackageList: any[] = [];\n\n  enableModuleName = false;\n  enableUserRole = false;\n  enableRefPackage = false;\n  enableBasePrice = false;\n  enableSubFrequency = false;\n  enableMetaConfig: boolean = false;\n\n  constructor(private _formBuilder: FormBuilder, private enterpFormService: EnterpriseFormService, private formConfig: FormConfig, private actionConfig: ActionConfig) {\n\n    /** subscribes to the last emitted grid list (current list) from the behaviour subject\n     *  @currentList observable instance.\n     */\n    this.enterpFormService.currentList.subscribe(data => {\n      console.log(data, 'form moduleList');\n      for(let i in data) {\n        if(data[i].status === 'ready' || data[i].status === 'subscribed') {\n          this.referencePackageList.push(data[i].packageName);\n        }\n      }\n\n    });\n\n    this.formConfig.currentFormHeader.subscribe(data => {\n      this.formHeader = data;\n    });\n\n    this.actionConfig.currModuleNameValue.subscribe(data => {\n      this.enableModuleName = data;\n    });\n\n    this.actionConfig.currUserRoleValue.subscribe(data => {\n      this.enableUserRole = data;\n    });\n\n    this.actionConfig.currRefPackageValue.subscribe(data => {\n      this.enableRefPackage = data;\n    });\n\n    this.actionConfig.curreBasePriceValue.subscribe(data => {\n      this.enableBasePrice = data;\n    });\n\n    this.actionConfig.curreSubFrequencyValue.subscribe(data => {\n      this.enableSubFrequency = data;\n    });\n  }\n\n  ngOnInit(): void {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required],\n      first2Ctrl: ['', Validators.required],\n    });\n\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\n\n  backToTable() {\n    this.enableGrid = true;\n    this.enterpFormService.enableOpenGridAction(this.enableGrid);\n  }\n\n  openMetaConfig() {\n    this.enableMetaConfig = true;\n    this.enterpFormService.enableOpenMetaConfigAction(this.enableMetaConfig);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModuleSet { \n  \n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { EnterpriseFormComponent } from './enterprise-form.component';\nimport { CommonModule } from '@angular/common';\nimport { EnterpriseFormService } from './enterprise-form.service';\nimport { MaterialModuleSet } from '../common/material-module';\n\n@NgModule({\n  declarations: [EnterpriseFormComponent],\n  imports: [\n    MaterialModuleSet,\n    CommonModule,\n  ],\n  exports: [EnterpriseFormComponent],\n  providers: [EnterpriseFormService],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA\n  ],\n})\nexport class EnterpriseFormModule { }\n"]}