/**
 * @fileoverview added by tsickle
 * Generated from: action/BaseActionDispatcher.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
var BaseActionDispatcher = /** @class */ (function () {
    function BaseActionDispatcher() {
    }
    /**
     * Get the token convert it and call the method requested .
     */
    /**
     * Get the token convert it and call the method requested .
     * @param {?} token
     * @return {?}
     */
    BaseActionDispatcher.prototype.dispatchAction = /**
     * Get the token convert it and call the method requested .
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var tokenArray = token.split("-");
        /** @type {?} */
        var transformedToken = [];
        for (var i = 0; i < tokenArray.length; i++) {
            if (i !== 0) {
                transformedToken.push(tokenArray[i].charAt(0).toUpperCase() + tokenArray[i].slice(1));
            }
            else {
                transformedToken.push(tokenArray[i]);
            }
        }
        /** @type {?} */
        var methodName = transformedToken.join("");
        console.log(this.actionDispatcher[methodName], methodName);
        this.actionDispatcher[methodName]();
    };
    Object.defineProperty(BaseActionDispatcher.prototype, "getActionDispatcher", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actionDispatcher;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseActionDispatcher.prototype, "setActionDispatcher", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.actionDispatcher = value;
        },
        enumerable: true,
        configurable: true
    });
    BaseActionDispatcher.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    BaseActionDispatcher.ctorParameters = function () { return []; };
    /** @nocollapse */ BaseActionDispatcher.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BaseActionDispatcher_Factory() { return new BaseActionDispatcher(); }, token: BaseActionDispatcher, providedIn: "root" });
    return BaseActionDispatcher;
}());
export { BaseActionDispatcher };
if (false) {
    /** @type {?} */
    BaseActionDispatcher.prototype.actionDispatcher;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFjdGlvbkRpc3BhdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9lbnRlcnByaXNlLWdyaWQvIiwic291cmNlcyI6WyJhY3Rpb24vQmFzZUFjdGlvbkRpc3BhdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQztJQU9FO0lBQWdCLENBQUM7SUFFakI7O09BRUc7Ozs7OztJQUNILDZDQUFjOzs7OztJQUFkLFVBQWUsS0FBYTs7WUFDcEIsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztZQUMvQixnQkFBZ0IsR0FBRyxFQUFFO1FBQ3pCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkY7aUJBQU07Z0JBQ0wsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7O1lBQ0ssVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELHNCQUFJLHFEQUFtQjs7OztRQUF2QjtZQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBRUQsc0JBQUkscURBQW1COzs7OztRQUF2QixVQUF3QixLQUFLO1lBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7O2dCQWpDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OzsrQkFMRDtDQXFDQyxBQWxDRCxJQWtDQztTQS9CWSxvQkFBb0I7OztJQUUvQixnREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25EaXNwYXRjaGVyIH0gZnJvbSBcIi4vQWN0aW9uRGlzcGF0Y2hlclwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCYXNlQWN0aW9uRGlzcGF0Y2hlciBpbXBsZW1lbnRzIEFjdGlvbkRpc3BhdGNoZXIge1xyXG5cclxuICBhY3Rpb25EaXNwYXRjaGVyOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdG9rZW4gY29udmVydCBpdCBhbmQgY2FsbCB0aGUgbWV0aG9kIHJlcXVlc3RlZCAuXHJcbiAgICovXHJcbiAgZGlzcGF0Y2hBY3Rpb24odG9rZW46IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgdG9rZW5BcnJheSA9IHRva2VuLnNwbGl0KFwiLVwiKTtcclxuICAgIGxldCB0cmFuc2Zvcm1lZFRva2VuID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGkgIT09IDApIHtcclxuICAgICAgICB0cmFuc2Zvcm1lZFRva2VuLnB1c2godG9rZW5BcnJheVtpXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRva2VuQXJyYXlbaV0uc2xpY2UoMSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyYW5zZm9ybWVkVG9rZW4ucHVzaCh0b2tlbkFycmF5W2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IHRyYW5zZm9ybWVkVG9rZW4uam9pbihcIlwiKTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuYWN0aW9uRGlzcGF0Y2hlclttZXRob2ROYW1lXSwgbWV0aG9kTmFtZSk7XHJcbiAgICB0aGlzLmFjdGlvbkRpc3BhdGNoZXJbbWV0aG9kTmFtZV0oKTtcclxuICB9XHJcblxyXG4gIGdldCBnZXRBY3Rpb25EaXNwYXRjaGVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0aW9uRGlzcGF0Y2hlcjtcclxuICB9XHJcblxyXG4gIHNldCBzZXRBY3Rpb25EaXNwYXRjaGVyKHZhbHVlKSB7XHJcbiAgICB0aGlzLmFjdGlvbkRpc3BhdGNoZXIgPSB2YWx1ZTtcclxuICB9XHJcbn0iXX0=