/**
 * @fileoverview added by tsickle
 * Generated from: directive/ao-grid-data.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { EnterpriseGridComponent } from '../lib/enterprise-grid.component';
var AoGridDataDirective = /** @class */ (function () {
    function AoGridDataDirective(enterpGridComp) {
        this.enterpGridComp = enterpGridComp;
    }
    /**
     * @return {?}
     */
    AoGridDataDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.gridData.then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            _this.enterpGridComp.setGridData = result;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.log(error);
        }));
    };
    AoGridDataDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ao-grid-data]'
                },] }
    ];
    /** @nocollapse */
    AoGridDataDirective.ctorParameters = function () { return [
        { type: EnterpriseGridComponent }
    ]; };
    AoGridDataDirective.propDecorators = {
        gridData: [{ type: Input }]
    };
    return AoGridDataDirective;
}());
export { AoGridDataDirective };
if (false) {
    /** @type {?} */
    AoGridDataDirective.prototype.gridData;
    /**
     * @type {?}
     * @private
     */
    AoGridDataDirective.prototype.enterpGridComp;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZ3JpZC1kYXRhLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2VudGVycHJpc2UtZ3JpZC8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZS9hby1ncmlkLWRhdGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFM0U7SUFPRSw2QkFBb0IsY0FBdUM7UUFBdkMsbUJBQWMsR0FBZCxjQUFjLENBQXlCO0lBQUksQ0FBQzs7OztJQUVoRSxzQ0FBUTs7O0lBQVI7UUFBQSxpQkFTQztRQVJDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTs7OztRQUNoQixVQUFBLE1BQU07WUFDSixLQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDM0MsQ0FBQzs7OztRQUNELFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsQ0FBQyxFQUNGLENBQUE7SUFDSCxDQUFDOztnQkFsQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOzs7O2dCQUpRLHVCQUF1Qjs7OzJCQU83QixLQUFLOztJQWVSLDBCQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FqQlksbUJBQW1COzs7SUFFOUIsdUNBQWtCOzs7OztJQUVOLDZDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFbnRlcnByaXNlR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2xpYi9lbnRlcnByaXNlLWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FvLWdyaWQtZGF0YV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBb0dyaWREYXRhRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCkgZ3JpZERhdGE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZW50ZXJwR3JpZENvbXA6IEVudGVycHJpc2VHcmlkQ29tcG9uZW50KSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmdyaWREYXRhLnRoZW4oXHJcbiAgICAgIHJlc3VsdCA9PiB7XHJcbiAgICAgICAgdGhpcy5lbnRlcnBHcmlkQ29tcC5zZXRHcmlkRGF0YSA9IHJlc3VsdDtcclxuICAgICAgfSxcclxuICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbn1cclxuIl19