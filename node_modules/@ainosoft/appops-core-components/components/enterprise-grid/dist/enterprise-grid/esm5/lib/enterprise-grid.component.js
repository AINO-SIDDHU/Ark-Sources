/**
 * @fileoverview added by tsickle
 * Generated from: lib/enterprise-grid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injectable, ViewChild } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { BaseActionDispatcher } from '../action/BaseActionDispatcher';
import * as i0 from "@angular/core";
import * as i1 from "../action/BaseActionDispatcher";
var EnterpriseGridComponent = /** @class */ (function () {
    function EnterpriseGridComponent(baseActionDispatcher) {
        this.baseActionDispatcher = baseActionDispatcher;
        this.gridConfig = new Array();
        this.columnConfig = new Array();
        this.gridDataList = new Array();
        this.gridHeader = '';
        this.addNewUserForm = { enable: false, token: '' };
        this.enableActionToolbar = { enable: false, token: '' };
        this.enableSearchToolBar = { enable: false, token: '' };
        this.enableSearchPlaceholder = { enable: 'none', token: '' };
        this.enableSearchBar = { enable: 'none', token: '' };
        this.enableForm = { enable: false, token: '' };
        this.enablePaging = false;
    }
    /**
     * @return {?}
     */
    EnterpriseGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columnConfig = [];
    };
    Object.defineProperty(EnterpriseGridComponent.prototype, "setGridData", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.gridDataList = data;
            this.createGrid();
            console.log(this.gridDataList, ' enterprise grid list received');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnterpriseGridComponent.prototype, "setGridConfig", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data, ' enterprise grid config received');
            this.gridHeader = data[0];
            this.columnConfig = data[1];
            this.gridConfig = data[2][0];
            this.sortGridConfig(this.gridConfig);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method sorts the grid configuration.
     * @param gridConfig JSON object of grid configuration.
     */
    /**
     * This method sorts the grid configuration.
     * @param {?} gridConfig JSON object of grid configuration.
     * @return {?}
     */
    EnterpriseGridComponent.prototype.sortGridConfig = /**
     * This method sorts the grid configuration.
     * @param {?} gridConfig JSON object of grid configuration.
     * @return {?}
     */
    function (gridConfig) {
        /** @type {?} */
        var keys = Object.keys(gridConfig);
        /** @type {?} */
        var enterpGridCompKeys = Object.getOwnPropertyNames(this);
        for (var i = 0; i < keys.length; i++) {
            for (var j = 0; j < enterpGridCompKeys.length; j++) {
                if (keys[i] === enterpGridCompKeys[j]) {
                    this[enterpGridCompKeys[j]]['enable'] = this.gridConfig[keys[i]]['enable'];
                    this[enterpGridCompKeys[j]]['token'] = this.gridConfig[keys[i]]['token'];
                }
            }
        }
    };
    /**
     * @return {?}
     */
    EnterpriseGridComponent.prototype.setWidthByColumn = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var count = 100 / this.columnConfig.length;
        // console.log(count);
        return count;
    };
    /** Creates grid rows and add styles */
    /**
     * Creates grid rows and add styles
     * @return {?}
     */
    EnterpriseGridComponent.prototype.createRows = /**
     * Creates grid rows and add styles
     * @return {?}
     */
    function () {
        this.row = document.createElement('tr');
        this.row.style.background = 'white';
        this.row.style.padding = '5px';
        this.row.classList.add("table-row-data");
        this.cdkVirtualViewport.appendChild(this.row);
        this.styleCells();
    };
    /** Creates grid cells and add styles */
    /**
     * Creates grid cells and add styles
     * @return {?}
     */
    EnterpriseGridComponent.prototype.styleCells = /**
     * Creates grid cells and add styles
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.columnConfig.length; i++) {
            this.tdElement = document.createElement('td');
            this.tdElement.style.paddingTop = '10px';
            this.tdElement.style.paddingBottom = '10px';
            this.tdElement.style.padding = '10px';
            this.tdElement.style.textAlign = 'left';
            this.tdElement.style.borderBottom = '1px solid #ddd';
            this.tdElement.style.fontFamily = '"Questrial", sans-serif';
            this.tdElement.style.border = 'none';
            this.tdElement.style.outline = 'none';
            this.tdElement.style.height = '39px';
            this.tdElement.style.width = this.setWidthByColumn() + '%';
            this.row.appendChild(this.tdElement);
        }
    };
    /**
     * Create table heading
     */
    /**
     * Create table heading
     * @return {?}
     */
    EnterpriseGridComponent.prototype.createTableHeading = /**
     * Create table heading
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tableHeadDiv = (/** @type {?} */ (document.getElementsByClassName("th-div")[0]));
        if (tableHeadDiv.childElementCount == 0) {
            for (var i = 0; i < this.columnConfig.length; i++) {
                this.thElement = document.createElement('th');
                this.thElement.style.padding = '10px';
                this.thElement.style.textAlign = 'left';
                this.thElement.style.borderBottom = '1px solid #ddd';
                this.thElement.style.fontFamily = '"Questrial", sans-serif';
                this.thElement.style.border = 'none';
                this.thElement.style.outline = 'none';
                this.thElement.style.fontSize = '14px';
                this.thElement.style.letterSpacing = '1px';
                this.thElement.style.height = '16px';
                this.thElement.style.color = 'rgba(0,0,0,.54)';
                // this.thElement.whiteSpace = 'nowrap';
                this.thElement.style.width = this.setWidthByColumn() + '%';
                if (this.columnConfig[i].name === 'checkbox') {
                    this.createCheckbox();
                    this.checkbox.style.marginTop = '0px';
                    this.thElement.appendChild(this.checkbox);
                }
                else {
                    /** @type {?} */
                    var headName = this.columnConfig[i].name;
                    this.thElement.innerHTML = this.columnConfig[i].item;
                    this.thElement.classList.add(headName);
                }
                tableHeadDiv.appendChild(this.thElement);
            }
        }
    };
    /**
     * @return {?}
     */
    EnterpriseGridComponent.prototype.createCheckbox = /**
     * @return {?}
     */
    function () {
        this.checkbox = document.createElement("INPUT");
        this.checkbox.setAttribute("type", "checkbox");
        this.checkbox.classList.add('checkbox');
        this.checkbox.style.transition = 'background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)';
        this.checkbox.style.cursor = 'pointer';
        this.checkbox.style.height = '16px';
        this.checkbox.style.margin = '6px';
        this.checkbox.style.width = '16px';
        this.checkbox.style.marginLeft = '17px';
    };
    /** Creates the rows and columns of the grid according to column defs and module data list */
    /**
     * Creates the rows and columns of the grid according to column defs and module data list
     * @return {?}
     */
    EnterpriseGridComponent.prototype.createGrid = /**
     * Creates the rows and columns of the grid according to column defs and module data list
     * @return {?}
     */
    function () {
        console.log('create grid');
        this.cdkVirtualViewport = document.getElementsByClassName('cdk-virtual-scroll-content-wrapper')[0];
        this.cdkVirtualViewport.style.display = 'inline-table';
        //Create table heading
        this.createTableHeading();
        for (var i = 0; i < this.gridDataList.length; i++) {
            this.createRows();
            this.createCheckbox();
            for (var moduleListKey in this.gridDataList[i]) {
                for (var columnConfigKey in this.columnConfig) {
                    if (this.columnConfig[columnConfigKey].name === moduleListKey) {
                        /** @type {?} */
                        var table = document.getElementsByClassName("table-row-data");
                        /** @type {?} */
                        var lastRowIndex = table.length;
                        /** @type {?} */
                        var tableRowData = (/** @type {?} */ (document.getElementsByClassName('table-row-data')[lastRowIndex - 1]));
                        /** @type {?} */
                        var tableDataCell = tableRowData.cells;
                        /** @type {?} */
                        var pos = this.columnConfig[columnConfigKey].position;
                        /** @type {?} */
                        var value = this.gridDataList[i][moduleListKey];
                        tableDataCell[0].appendChild(this.checkbox);
                        tableDataCell[pos].innerHTML = value;
                    }
                }
            }
        }
    };
    /** Search filteration by name
     *  (Still in progress)
     */
    /**
     * Search filteration by name
     *  (Still in progress)
     * @param {?} data
     * @return {?}
     */
    EnterpriseGridComponent.prototype.searchByName = /**
     * Search filteration by name
     *  (Still in progress)
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.gridDataList = [];
        for (var i = 0; i < this.gridDataList.length; i++) {
            if (this.gridDataList[i].firstName.includes(data)) {
                this.gridDataList.push(this.gridDataList[i]);
            }
        }
    };
    /**
     * @param {?} a
     * @return {?}
     */
    EnterpriseGridComponent.prototype.getNextBatchOfImages = /**
     * @param {?} a
     * @return {?}
     */
    function (a) {
        if (this.virtualScroll.measureScrollOffset('bottom') === 0) {
        }
    };
    /**
     * Forward the event to dispatch action with tokens and parameters.
     */
    /**
     * Forward the event to dispatch action with tokens and parameters.
     * @param {?} token
     * @return {?}
     */
    EnterpriseGridComponent.prototype.addNewUserFormAction = /**
     * Forward the event to dispatch action with tokens and parameters.
     * @param {?} token
     * @return {?}
     */
    function (token) {
        this.baseActionDispatcher.dispatchAction(token);
    };
    /** Toggles from search placeholder to search bar/box by setting the display value */
    /**
     * Toggles from search placeholder to search bar/box by setting the display value
     * @param {?} action
     * @return {?}
     */
    EnterpriseGridComponent.prototype.toggleToSearchBar = /**
     * Toggles from search placeholder to search bar/box by setting the display value
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.baseActionDispatcher.dispatchAction(action);
    };
    EnterpriseGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ao-enterprise-grid',
                    template: "<div class=\"gridBgColor enterp-grid-container\">\r\n    <mat-toolbar class=\"gridBgColor action-bar\" *ngIf=\"enableActionToolbar.enable\">\r\n        <h2>{{gridHeader}} | </h2>\r\n        <span> Showing all {{gridHeader + 's' | lowercase}}</span>\r\n\r\n        <button mat-button class=\"action-button\" *ngIf=\"addNewUserForm.enable\"\r\n            (click)=\"addNewUserFormAction(addNewUserForm.token)\" matTooltip=\"Add new {{gridHeader | lowercase}}\">\r\n            Add new {{gridHeader | lowercase}}\r\n        </button>\r\n\r\n        <button mat-button [matMenuTriggerFor]=\"afterMenu\" class=\"action-button\" matTooltip=\"more actions\">More\r\n            <mat-icon>arrow_drop_down</mat-icon>\r\n        </button>\r\n        <mat-menu #afterMenu=\"matMenu\" xPosition=\"after\">\r\n            <button mat-menu-item>{{gridHeader | lowercase}} meta config</button>\r\n        </mat-menu>\r\n\r\n    </mat-toolbar>\r\n    <mat-toolbar class=\"search-toolbar\" *ngIf=\"enableSearchToolBar.enable\">\r\n\r\n        <div class=\"search-placeholder\" *ngIf=\"enableSearchPlaceholder.enable\">\r\n            <button mat-button class=\"filter-button\" (click)='toggleToSearchBar(enableSearchPlaceholder.token)'>\r\n                <mat-icon>add</mat-icon> Add a filter\r\n            </button>\r\n        </div>\r\n        <mat-form-field class=\"search-field\" *ngIf=\"enableSearchBar.enable\">\r\n            <input type=\"text\" class=\"search-input\" matInput placeholder=\"search\" [ngModel]=\"filterValue\"\r\n                (ngModelChange)=\"filterValue=searchByName(filterValue)\">\r\n        </mat-form-field>\r\n\r\n    </mat-toolbar>\r\n\r\n    <div class='table-card'>\r\n        <div class=\"th-div\">\r\n\r\n        </div>\r\n\r\n        <cdk-virtual-scroll-viewport CdkScrollable itemSize=\"1\" id=\"example-viewport1\"\r\n            (scroll)='getNextBatchOfImages(\"Approved\")'>\r\n\r\n        </cdk-virtual-scroll-viewport>\r\n    </div>\r\n\r\n    <mat-toolbar class=\"footer\">\r\n        <p>Ainosoft \u00A92017 All rights reserved</p>\r\n    </mat-toolbar>\r\n\r\n</div>",
                    styles: [".gridBgColor{background:#f0f1f3}.search-toolbar{background:#fff}span{font-weight:100;color:rgba(0,0,0,.54);font-size:15px;margin-left:2px}h2{margin-left:5px;color:#414c55;font-family:Questrial,sans-serif;font-weight:700;letter-spacing:1px}.mat-toolbar-row,.mat-toolbar-single-row{height:55px}.filter-button{border:1px dashed rgba(0,0,0,.26);border-radius:34px;-webkit-transition:opacity .1s cubic-bezier(.4,0,.2,1);transition:opacity .1s cubic-bezier(.4,0,.2,1);color:rgba(0,0,0,.54)}.action-button{color:#3367d6}tr:hover{background:rgba(18,154,144,.08);-webkit-transition:270ms ease-in-out;transition:270ms ease-in-out}*{word-wrap:break-word;border-spacing:0 5px}.table-card{padding:11px}.th-div{display:-webkit-box;display:flex;width:95%}#example-viewport1{height:58vh;width:100%}.checkbox{display:inline-block;height:16px;line-height:0;margin:auto 8px auto auto;-webkit-box-ordinal-group:1;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}.card{padding:8px;-webkit-animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-table;animation:.5s cubic-bezier(.25,.46,.45,.94) both slide-table}@-webkit-keyframes slide-table{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}@keyframes slide-table{from{-webkit-transform:translateX(150px);transform:translateX(150px)}to{-webkit-transform:translateX(5px);transform:translateX(5px)}}.search-field,.search-placeholder{border:none;font-size:14px;height:40px;min-width:200px;outline:0;padding:0;width:100%}.search-placeholder{display:block}.search-field{display:none}.footer{background:#3367d6;font:400 13.3333px Arial;color:#fff;position:fixed;bottom:0}::-webkit-scrollbar{width:4px}::-webkit-scrollbar-track{background:#f1f1f1}::-webkit-scrollbar-thumb{background:#20b2aa}"]
                }] },
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EnterpriseGridComponent.ctorParameters = function () { return [
        { type: BaseActionDispatcher }
    ]; };
    EnterpriseGridComponent.propDecorators = {
        virtualScroll: [{ type: ViewChild, args: [CdkVirtualScrollViewport, { static: false },] }]
    };
    /** @nocollapse */ EnterpriseGridComponent.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function EnterpriseGridComponent_Factory() { return new EnterpriseGridComponent(i0.ɵɵinject(i1.BaseActionDispatcher)); }, token: EnterpriseGridComponent, providedIn: "root" });
    return EnterpriseGridComponent;
}());
export { EnterpriseGridComponent };
if (false) {
    /** @type {?} */
    EnterpriseGridComponent.prototype.gridConfig;
    /** @type {?} */
    EnterpriseGridComponent.prototype.columnConfig;
    /** @type {?} */
    EnterpriseGridComponent.prototype.gridDataList;
    /** @type {?} */
    EnterpriseGridComponent.prototype.gridHeader;
    /** @type {?} */
    EnterpriseGridComponent.prototype.addNewUserForm;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enableActionToolbar;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enableSearchToolBar;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enableSearchPlaceholder;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enableSearchBar;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enableForm;
    /** @type {?} */
    EnterpriseGridComponent.prototype.enablePaging;
    /** @type {?} */
    EnterpriseGridComponent.prototype.row;
    /** @type {?} */
    EnterpriseGridComponent.prototype.cdkVirtualViewport;
    /** @type {?} */
    EnterpriseGridComponent.prototype.tdElement;
    /** @type {?} */
    EnterpriseGridComponent.prototype.thElement;
    /** @type {?} */
    EnterpriseGridComponent.prototype.filterValue;
    /** @type {?} */
    EnterpriseGridComponent.prototype.checkbox;
    /** @type {?} */
    EnterpriseGridComponent.prototype.virtualScroll;
    /**
     * @type {?}
     * @private
     */
    EnterpriseGridComponent.prototype.baseActionDispatcher;
}
//# sourceMappingURL=data:application/json;base64,