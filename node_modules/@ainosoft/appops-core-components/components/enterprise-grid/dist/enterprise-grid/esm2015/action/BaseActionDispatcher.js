/**
 * @fileoverview added by tsickle
 * Generated from: action/BaseActionDispatcher.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
export class BaseActionDispatcher {
    constructor() { }
    /**
     * Get the token convert it and call the method requested .
     * @param {?} token
     * @return {?}
     */
    dispatchAction(token) {
        /** @type {?} */
        const tokenArray = token.split("-");
        /** @type {?} */
        let transformedToken = [];
        for (let i = 0; i < tokenArray.length; i++) {
            if (i !== 0) {
                transformedToken.push(tokenArray[i].charAt(0).toUpperCase() + tokenArray[i].slice(1));
            }
            else {
                transformedToken.push(tokenArray[i]);
            }
        }
        /** @type {?} */
        const methodName = transformedToken.join("");
        console.log(this.actionDispatcher[methodName], methodName);
        this.actionDispatcher[methodName]();
    }
    /**
     * @return {?}
     */
    get getActionDispatcher() {
        return this.actionDispatcher;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setActionDispatcher(value) {
        this.actionDispatcher = value;
    }
}
BaseActionDispatcher.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
BaseActionDispatcher.ctorParameters = () => [];
/** @nocollapse */ BaseActionDispatcher.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BaseActionDispatcher_Factory() { return new BaseActionDispatcher(); }, token: BaseActionDispatcher, providedIn: "root" });
if (false) {
    /** @type {?} */
    BaseActionDispatcher.prototype.actionDispatcher;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUFjdGlvbkRpc3BhdGNoZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9lbnRlcnByaXNlLWdyaWQvIiwic291cmNlcyI6WyJhY3Rpb24vQmFzZUFjdGlvbkRpc3BhdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sb0JBQW9CO0lBSS9CLGdCQUFnQixDQUFDOzs7Ozs7SUFLakIsY0FBYyxDQUFDLEtBQWE7O2NBQ3BCLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7WUFDL0IsZ0JBQWdCLEdBQUcsRUFBRTtRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZGO2lCQUFNO2dCQUNMLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QztTQUNGOztjQUNLLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELElBQUksbUJBQW1CLENBQUMsS0FBSztRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7OztZQWpDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7SUFHQyxnREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25EaXNwYXRjaGVyIH0gZnJvbSBcIi4vQWN0aW9uRGlzcGF0Y2hlclwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCYXNlQWN0aW9uRGlzcGF0Y2hlciBpbXBsZW1lbnRzIEFjdGlvbkRpc3BhdGNoZXIge1xyXG5cclxuICBhY3Rpb25EaXNwYXRjaGVyOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdG9rZW4gY29udmVydCBpdCBhbmQgY2FsbCB0aGUgbWV0aG9kIHJlcXVlc3RlZCAuXHJcbiAgICovXHJcbiAgZGlzcGF0Y2hBY3Rpb24odG9rZW46IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgdG9rZW5BcnJheSA9IHRva2VuLnNwbGl0KFwiLVwiKTtcclxuICAgIGxldCB0cmFuc2Zvcm1lZFRva2VuID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGkgIT09IDApIHtcclxuICAgICAgICB0cmFuc2Zvcm1lZFRva2VuLnB1c2godG9rZW5BcnJheVtpXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRva2VuQXJyYXlbaV0uc2xpY2UoMSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyYW5zZm9ybWVkVG9rZW4ucHVzaCh0b2tlbkFycmF5W2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWV0aG9kTmFtZSA9IHRyYW5zZm9ybWVkVG9rZW4uam9pbihcIlwiKTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuYWN0aW9uRGlzcGF0Y2hlclttZXRob2ROYW1lXSwgbWV0aG9kTmFtZSk7XHJcbiAgICB0aGlzLmFjdGlvbkRpc3BhdGNoZXJbbWV0aG9kTmFtZV0oKTtcclxuICB9XHJcblxyXG4gIGdldCBnZXRBY3Rpb25EaXNwYXRjaGVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0aW9uRGlzcGF0Y2hlcjtcclxuICB9XHJcblxyXG4gIHNldCBzZXRBY3Rpb25EaXNwYXRjaGVyKHZhbHVlKSB7XHJcbiAgICB0aGlzLmFjdGlvbkRpc3BhdGNoZXIgPSB2YWx1ZTtcclxuICB9XHJcbn0iXX0=