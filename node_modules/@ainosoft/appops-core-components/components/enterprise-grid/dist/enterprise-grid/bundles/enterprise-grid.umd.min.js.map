{"version":3,"sources":["ng://enterprise-grid/action/BaseActionDispatcher.ts","ng://enterprise-grid/lib/enterprise-grid.component.ts","ng://enterprise-grid/common/material-module.ts","ng://enterprise-grid/directive/ao-grid-data.directive.ts","ng://enterprise-grid/directive/ao-actions.directive.ts","ng://enterprise-grid/directive/ao-grid-config.directive.ts","ng://enterprise-grid/lib/enterprise-grid.module.ts"],"names":["BaseActionDispatcher","prototype","dispatchAction","token","tokenArray","split","transformedToken","i","length","push","charAt","toUpperCase","slice","methodName","join","console","log","this","actionDispatcher","Object","defineProperty","value","Injectable","args","providedIn","EnterpriseGridComponent","baseActionDispatcher","gridConfig","Array","columnConfig","gridDataList","gridHeader","addNewUserForm","enable","enableActionToolbar","enableSearchToolBar","enableSearchPlaceholder","enableSearchBar","enableForm","enablePaging","ngOnInit","data","createGrid","sortGridConfig","keys","enterpGridCompKeys","getOwnPropertyNames","j","setWidthByColumn","createRows","row","document","createElement","style","background","padding","classList","add","cdkVirtualViewport","appendChild","styleCells","tdElement","paddingTop","paddingBottom","textAlign","borderBottom","fontFamily","border","outline","height","width","createTableHeading","tableHeadDiv","getElementsByClassName","childElementCount","thElement","fontSize","letterSpacing","color","name","createCheckbox","checkbox","marginTop","headName","innerHTML","item","setAttribute","transition","cursor","margin","marginLeft","display","moduleListKey","columnConfigKey","lastRowIndex","tableDataCell","cells","pos","position","searchByName","firstName","includes","getNextBatchOfImages","a","virtualScroll","measureScrollOffset","addNewUserFormAction","toggleToSearchBar","action","Component","selector","template","ViewChild","CdkVirtualScrollViewport","static","MaterialModuleSet","NgModule","exports","A11yModule","CdkStepperModule","CdkTableModule","CdkTreeModule","DragDropModule","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatDividerModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatTreeModule","PortalModule","ScrollingModule","AoGridDataDirective","enterpGridComp","_this","gridData","then","result","setGridData","error","Directive","Input","AoActionsDirective","setActionDispatcher","AoGridConfigDirective","setGridConfig","EnterpriseGridModule","declarations","imports","CommonModule","providers","schemas","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["import { ActionDispatcher } from \"./ActionDispatcher\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BaseActionDispatcher implements ActionDispatcher {\r\n\r\n  actionDispatcher: string;\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Get the token convert it and call the method requested .\r\n   */\r\n  dispatchAction(token: string): void {\r\n    const tokenArray = token.split(\"-\");\r\n    let transformedToken = [];\r\n    for (let i = 0; i < tokenArray.length; i++) {\r\n      if (i !== 0) {\r\n        transformedToken.push(tokenArray[i].charAt(0).toUpperCase() + tokenArray[i].slice(1));\r\n      } else {\r\n        transformedToken.push(tokenArray[i]);\r\n      }\r\n    }\r\n    const methodName = transformedToken.join(\"\");\r\n    console.log(this.actionDispatcher[methodName], methodName);\r\n    this.actionDispatcher[methodName]();\r\n  }\r\n\r\n  get getActionDispatcher() {\r\n    return this.actionDispatcher;\r\n  }\r\n\r\n  set setActionDispatcher(value) {\r\n    this.actionDispatcher = value;\r\n  }\r\n}","import { Component, OnInit, Injectable, ViewChild } from '@angular/core';\r\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { BaseActionDispatcher } from '../action/BaseActionDispatcher';\r\n\r\n@Component({\r\n  selector: 'ao-enterprise-grid',\r\n  templateUrl: './enterprise-grid.component.html',\r\n  styleUrls: ['./enterprise-grid.component.scss'],\r\n})\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnterpriseGridComponent implements OnInit {\r\n\r\n  gridConfig = new Array();\r\n\r\n  columnConfig = new Array();\r\n  gridDataList = new Array();\r\n  gridHeader: string = '';\r\n\r\n  addNewUserForm = { enable: false, token: '' };\r\n  enableActionToolbar = { enable: false, token: '' };\r\n  enableSearchToolBar = { enable: false, token: '' };\r\n  enableSearchPlaceholder = { enable: 'none', token: '' };\r\n  enableSearchBar = { enable: 'none', token: '' };\r\n  enableForm = { enable: false, token: '' };\r\n  enablePaging: boolean = false;\r\n\r\n  row: HTMLTableRowElement;\r\n  cdkVirtualViewport;\r\n  tdElement: HTMLTableCellElement;\r\n  thElement: HTMLTableHeaderCellElement;\r\n  filterValue;\r\n  checkbox;\r\n\r\n  @ViewChild(CdkVirtualScrollViewport, { static: false }) virtualScroll: CdkVirtualScrollViewport;\r\n\r\n  constructor(private baseActionDispatcher: BaseActionDispatcher) {}\r\n\r\n  ngOnInit() {\r\n    this.columnConfig = [];\r\n  }\r\n\r\n  set setGridData(data) {\r\n    this.gridDataList=data;\r\n    this.createGrid();\r\n    console.log(this.gridDataList, ' enterprise grid list received');\r\n  }\r\n\r\n  set setGridConfig(data) {\r\n    console.log(data, ' enterprise grid config received');\r\n    this.gridHeader = data[0];\r\n    this.columnConfig = data[1];\r\n    this.gridConfig = data[2][0];\r\n\r\n    this.sortGridConfig(this.gridConfig);\r\n  }\r\n\r\n  /**\r\n   * This method sorts the grid configuration.\r\n   * @param gridConfig JSON object of grid configuration.\r\n   */\r\n  sortGridConfig(gridConfig) {\r\n    let keys = Object.keys(gridConfig);\r\n    let enterpGridCompKeys = Object.getOwnPropertyNames(this);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      for (let j = 0; j < enterpGridCompKeys.length; j++) {\r\n        if (keys[i] === enterpGridCompKeys[j]) {\r\n          this[enterpGridCompKeys[j]]['enable'] = this.gridConfig[keys[i]]['enable'];\r\n          this[enterpGridCompKeys[j]]['token'] = this.gridConfig[keys[i]]['token'];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  setWidthByColumn(): number {\r\n    const count = 100 / this.columnConfig.length;\r\n    // console.log(count);\r\n    return count;\r\n  }\r\n\r\n  /** Creates grid rows and add styles */\r\n  createRows() {\r\n    this.row = document.createElement('tr');\r\n    this.row.style.background = 'white';\r\n    this.row.style.padding = '5px';\r\n    this.row.classList.add(\"table-row-data\");\r\n    this.cdkVirtualViewport.appendChild(this.row);\r\n    this.styleCells();\r\n  }\r\n\r\n  /** Creates grid cells and add styles */\r\n\r\n  styleCells() {\r\n    for (let i = 0; i < this.columnConfig.length; i++) {\r\n      this.tdElement = document.createElement('td');\r\n      this.tdElement.style.paddingTop = '10px';\r\n      this.tdElement.style.paddingBottom = '10px';\r\n      this.tdElement.style.padding = '10px';\r\n      this.tdElement.style.textAlign = 'left';\r\n      this.tdElement.style.borderBottom = '1px solid #ddd';\r\n      this.tdElement.style.fontFamily = '\"Questrial\", sans-serif';\r\n      this.tdElement.style.border = 'none';\r\n      this.tdElement.style.outline = 'none';\r\n      this.tdElement.style.height = '39px';\r\n      this.tdElement.style.width = this.setWidthByColumn() + '%';\r\n      this.row.appendChild(this.tdElement);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Create table heading\r\n   */\r\n  createTableHeading(): void {\r\n    const tableHeadDiv = document.getElementsByClassName(\"th-div\")[0] as HTMLElement;\r\n\r\n    if (tableHeadDiv.childElementCount == 0) {\r\n      for (let i = 0; i < this.columnConfig.length; i++) {\r\n        this.thElement = document.createElement('th');\r\n\r\n        this.thElement.style.padding = '10px';\r\n        this.thElement.style.textAlign = 'left';\r\n        this.thElement.style.borderBottom = '1px solid #ddd';\r\n        this.thElement.style.fontFamily = '\"Questrial\", sans-serif';\r\n        this.thElement.style.border = 'none';\r\n        this.thElement.style.outline = 'none';\r\n        this.thElement.style.fontSize = '14px';\r\n        this.thElement.style.letterSpacing = '1px';\r\n        this.thElement.style.height = '16px';\r\n        this.thElement.style.color = 'rgba(0,0,0,.54)';\r\n        // this.thElement.whiteSpace = 'nowrap';\r\n        this.thElement.style.width = this.setWidthByColumn() + '%';\r\n\r\n        if (this.columnConfig[i].name === 'checkbox') {\r\n          this.createCheckbox();\r\n          this.checkbox.style.marginTop = '0px';\r\n          this.thElement.appendChild(this.checkbox);\r\n        } else {\r\n          const headName = this.columnConfig[i].name;\r\n          this.thElement.innerHTML = this.columnConfig[i].item;\r\n          this.thElement.classList.add(headName);\r\n        }\r\n\r\n        tableHeadDiv.appendChild(this.thElement);\r\n      }\r\n    }\r\n  }\r\n\r\n  createCheckbox() {\r\n    this.checkbox = document.createElement(\"INPUT\");\r\n    this.checkbox.setAttribute(\"type\", \"checkbox\");\r\n\r\n    this.checkbox.classList.add('checkbox');\r\n    this.checkbox.style.transition = 'background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)';\r\n    this.checkbox.style.cursor = 'pointer';\r\n    this.checkbox.style.height = '16px';\r\n    this.checkbox.style.margin = '6px';\r\n    this.checkbox.style.width = '16px';\r\n    this.checkbox.style.marginLeft = '17px';\r\n  }\r\n\r\n  /** Creates the rows and columns of the grid according to column defs and module data list */\r\n  createGrid() {\r\n    console.log('create grid');\r\n    this.cdkVirtualViewport = document.getElementsByClassName('cdk-virtual-scroll-content-wrapper')[0];\r\n    this.cdkVirtualViewport.style.display = 'inline-table';\r\n\r\n    //Create table heading\r\n    this.createTableHeading();\r\n\r\n    for (let i = 0; i < this.gridDataList.length; i++) {\r\n\r\n      this.createRows();\r\n      this.createCheckbox();\r\n\r\n      for (let moduleListKey in this.gridDataList[i]) {\r\n        for (let columnConfigKey in this.columnConfig) {\r\n          if (this.columnConfig[columnConfigKey].name === moduleListKey) {\r\n            var table = document.getElementsByClassName(\"table-row-data\");\r\n\r\n            var lastRowIndex = table.length;\r\n\r\n            let tableRowData = document.getElementsByClassName('table-row-data')[lastRowIndex - 1] as HTMLTableRowElement;\r\n\r\n            let tableDataCell = tableRowData.cells;\r\n\r\n            let pos = this.columnConfig[columnConfigKey].position;\r\n\r\n            let value = this.gridDataList[i][moduleListKey];\r\n\r\n            tableDataCell[0].appendChild(this.checkbox);\r\n\r\n            tableDataCell[pos].innerHTML = value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Search filteration by name\r\n   *  (Still in progress)\r\n   */\r\n  searchByName(data) {\r\n\r\n    this.gridDataList = [];\r\n    for (let i = 0; i < this.gridDataList.length; i++) {\r\n      if (this.gridDataList[i].firstName.includes(data)) {\r\n        this.gridDataList.push(this.gridDataList[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getNextBatchOfImages(a) {\r\n\r\n    if (this.virtualScroll.measureScrollOffset('bottom') === 0) {\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Forward the event to dispatch action with tokens and parameters.\r\n   */\r\n  addNewUserFormAction(token): void {\r\n    this.baseActionDispatcher.dispatchAction(token);\r\n  }\r\n\r\n  /** Toggles from search placeholder to search bar/box by setting the display value */\r\n  toggleToSearchBar(action) {\r\n    this.baseActionDispatcher.dispatchAction(action);\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class MaterialModuleSet { \r\n  \r\n}","import { Directive, Input, OnInit } from '@angular/core';\r\nimport { EnterpriseGridComponent } from '../lib/enterprise-grid.component';\r\n\r\n@Directive({\r\n  selector: '[ao-grid-data]'\r\n})\r\nexport class AoGridDataDirective implements OnInit {\r\n\r\n  @Input() gridData;\r\n\r\n  constructor(private enterpGridComp: EnterpriseGridComponent) { }\r\n\r\n  ngOnInit(): void {\r\n    this.gridData.then(\r\n      result => {\r\n        this.enterpGridComp.setGridData = result;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    )\r\n  }\r\n\r\n}\r\n","import { Directive, OnInit, Input } from '@angular/core';\r\nimport { BaseActionDispatcher } from '../action/BaseActionDispatcher';\r\n\r\n@Directive({\r\n  selector: '[ao-actions]'\r\n})\r\nexport class AoActionsDirective implements OnInit {\r\n\r\n  @Input() actionDispatcher;\r\n  \r\n  constructor(private baseActionDispatcher: BaseActionDispatcher) { }\r\n\r\n  ngOnInit(): void {\r\n    this.baseActionDispatcher.setActionDispatcher = this.actionDispatcher;\r\n  }\r\n}\r\n","import { OnInit, Directive, Input, ElementRef } from \"@angular/core\";\r\nimport { EnterpriseGridComponent } from \"../lib/enterprise-grid.component\";\r\n\r\n@Directive({\r\n    selector: '[ao-grid-config]'\r\n})\r\nexport class AoGridConfigDirective implements OnInit {\r\n\r\n    @Input() gridConfig;\r\n    \r\n    constructor(private enterpGridComp: EnterpriseGridComponent) { }\r\n\r\n    ngOnInit(): void {\r\n        this.enterpGridComp.setGridConfig = this.gridConfig;\r\n    }\r\n}","import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { EnterpriseGridComponent } from './enterprise-grid.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MaterialModuleSet } from '../common/material-module';\r\nimport { AoGridDataDirective } from '../directive/ao-grid-data.directive';\r\nimport { AoActionsDirective } from '../directive/ao-actions.directive';\r\nimport { AoGridConfigDirective } from '../directive/ao-grid-config.directive';\r\n\r\n@NgModule({\r\n  declarations: [EnterpriseGridComponent, AoGridDataDirective, AoActionsDirective, AoGridConfigDirective],\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModuleSet,\r\n  ],\r\n  exports: [EnterpriseGridComponent, AoGridDataDirective,AoActionsDirective, AoGridConfigDirective],\r\n  providers: [ EnterpriseGridComponent],\r\n  schemas: [\r\n    CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA\r\n  ],\r\n})\r\nexport class EnterpriseGridModule { }\r\n"]}