import { Component, OnInit, Injectable, ViewChild } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { BaseActionDispatcher } from '../action/BaseActionDispatcher';

@Component({
  selector: 'ao-enterprise-grid',
  templateUrl: './enterprise-grid.component.html',
  styleUrls: ['./enterprise-grid.component.scss'],
})
@Injectable({
  providedIn: 'root'
})
export class EnterpriseGridComponent implements OnInit {

  gridConfig = new Array();

  columnConfig = new Array();
  gridDataList = new Array();
  gridHeader: string = '';

  addNewUserForm = { enable: false, token: '' };
  enableActionToolbar = { enable: false, token: '' };
  enableSearchToolBar = { enable: false, token: '' };
  enableSearchPlaceholder = { enable: 'none', token: '' };
  enableSearchBar = { enable: 'none', token: '' };
  enableForm = { enable: false, token: '' };
  enablePaging: boolean = false;

  row: HTMLTableRowElement;
  cdkVirtualViewport;
  tdElement: HTMLTableCellElement;
  thElement: HTMLTableHeaderCellElement;
  filterValue;
  checkbox;

  @ViewChild(CdkVirtualScrollViewport, { static: false }) virtualScroll: CdkVirtualScrollViewport;

  constructor(private baseActionDispatcher: BaseActionDispatcher) {}

  ngOnInit() {
    this.columnConfig = [];
  }

  set setGridData(data) {
    this.gridDataList=data;
    this.createGrid();
    console.log(this.gridDataList, ' enterprise grid list received');
  }

  set setGridConfig(data) {
    console.log(data, ' enterprise grid config received');
    this.gridHeader = data[0];
    this.columnConfig = data[1];
    this.gridConfig = data[2][0];

    this.sortGridConfig(this.gridConfig);
  }

  /**
   * This method sorts the grid configuration.
   * @param gridConfig JSON object of grid configuration.
   */
  sortGridConfig(gridConfig) {
    let keys = Object.keys(gridConfig);
    let enterpGridCompKeys = Object.getOwnPropertyNames(this);

    for (let i = 0; i < keys.length; i++) {
      for (let j = 0; j < enterpGridCompKeys.length; j++) {
        if (keys[i] === enterpGridCompKeys[j]) {
          this[enterpGridCompKeys[j]]['enable'] = this.gridConfig[keys[i]]['enable'];
          this[enterpGridCompKeys[j]]['token'] = this.gridConfig[keys[i]]['token'];
        }
      }
    }
  }

  setWidthByColumn(): number {
    const count = 100 / this.columnConfig.length;
    // console.log(count);
    return count;
  }

  /** Creates grid rows and add styles */
  createRows() {
    this.row = document.createElement('tr');
    this.row.style.background = 'white';
    this.row.style.padding = '5px';
    this.row.classList.add("table-row-data");
    this.cdkVirtualViewport.appendChild(this.row);
    this.styleCells();
  }

  /** Creates grid cells and add styles */

  styleCells() {
    for (let i = 0; i < this.columnConfig.length; i++) {
      this.tdElement = document.createElement('td');
      this.tdElement.style.paddingTop = '10px';
      this.tdElement.style.paddingBottom = '10px';
      this.tdElement.style.padding = '10px';
      this.tdElement.style.textAlign = 'left';
      this.tdElement.style.borderBottom = '1px solid #ddd';
      this.tdElement.style.fontFamily = '"Questrial", sans-serif';
      this.tdElement.style.border = 'none';
      this.tdElement.style.outline = 'none';
      this.tdElement.style.height = '39px';
      this.tdElement.style.width = this.setWidthByColumn() + '%';
      this.row.appendChild(this.tdElement);
    }

  }

  /**
   * Create table heading
   */
  createTableHeading(): void {
    const tableHeadDiv = document.getElementsByClassName("th-div")[0] as HTMLElement;

    if (tableHeadDiv.childElementCount == 0) {
      for (let i = 0; i < this.columnConfig.length; i++) {
        this.thElement = document.createElement('th');

        this.thElement.style.padding = '10px';
        this.thElement.style.textAlign = 'left';
        this.thElement.style.borderBottom = '1px solid #ddd';
        this.thElement.style.fontFamily = '"Questrial", sans-serif';
        this.thElement.style.border = 'none';
        this.thElement.style.outline = 'none';
        this.thElement.style.fontSize = '14px';
        this.thElement.style.letterSpacing = '1px';
        this.thElement.style.height = '16px';
        this.thElement.style.color = 'rgba(0,0,0,.54)';
        // this.thElement.whiteSpace = 'nowrap';
        this.thElement.style.width = this.setWidthByColumn() + '%';

        if (this.columnConfig[i].name === 'checkbox') {
          this.createCheckbox();
          this.checkbox.style.marginTop = '0px';
          this.thElement.appendChild(this.checkbox);
        } else {
          const headName = this.columnConfig[i].name;
          this.thElement.innerHTML = this.columnConfig[i].item;
          this.thElement.classList.add(headName);
        }

        tableHeadDiv.appendChild(this.thElement);
      }
    }
  }

  createCheckbox() {
    this.checkbox = document.createElement("INPUT");
    this.checkbox.setAttribute("type", "checkbox");

    this.checkbox.classList.add('checkbox');
    this.checkbox.style.transition = 'background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)';
    this.checkbox.style.cursor = 'pointer';
    this.checkbox.style.height = '16px';
    this.checkbox.style.margin = '6px';
    this.checkbox.style.width = '16px';
    this.checkbox.style.marginLeft = '17px';
  }

  /** Creates the rows and columns of the grid according to column defs and module data list */
  createGrid() {
    console.log('create grid');
    this.cdkVirtualViewport = document.getElementsByClassName('cdk-virtual-scroll-content-wrapper')[0];
    this.cdkVirtualViewport.style.display = 'inline-table';

    //Create table heading
    this.createTableHeading();

    for (let i = 0; i < this.gridDataList.length; i++) {

      this.createRows();
      this.createCheckbox();

      for (let moduleListKey in this.gridDataList[i]) {
        for (let columnConfigKey in this.columnConfig) {
          if (this.columnConfig[columnConfigKey].name === moduleListKey) {
            var table = document.getElementsByClassName("table-row-data");

            var lastRowIndex = table.length;

            let tableRowData = document.getElementsByClassName('table-row-data')[lastRowIndex - 1] as HTMLTableRowElement;

            let tableDataCell = tableRowData.cells;

            let pos = this.columnConfig[columnConfigKey].position;

            let value = this.gridDataList[i][moduleListKey];

            tableDataCell[0].appendChild(this.checkbox);

            tableDataCell[pos].innerHTML = value;
          }
        }
      }
    }
  }

  /** Search filteration by name
   *  (Still in progress)
   */
  searchByName(data) {

    this.gridDataList = [];
    for (let i = 0; i < this.gridDataList.length; i++) {
      if (this.gridDataList[i].firstName.includes(data)) {
        this.gridDataList.push(this.gridDataList[i]);
      }
    }
  }

  getNextBatchOfImages(a) {

    if (this.virtualScroll.measureScrollOffset('bottom') === 0) {

    }
  }

  /**
   * Forward the event to dispatch action with tokens and parameters.
   */
  addNewUserFormAction(token): void {
    this.baseActionDispatcher.dispatchAction(token);
  }

  /** Toggles from search placeholder to search bar/box by setting the display value */
  toggleToSearchBar(action) {
    this.baseActionDispatcher.dispatchAction(action);
  }
}
